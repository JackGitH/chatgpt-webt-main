import * as dotenv from 'dotenv'
import 'isomorphic-fetch'
import type { ChatGPTAPIOptions, ChatMessage, SendMessageOptions } from 'chatgpt'
import { ChatGPTAPI, ChatGPTUnofficialProxyAPI } from 'chatgpt'
import { SocksProxyAgent } from 'socks-proxy-agent'
import httpsProxyAgent from 'https-proxy-agent'
import fetch from 'node-fetch'
import { sendResponse } from '../utils'
import { isNotEmptyString } from '../utils/is'
import type { ApiModel, ChatContext, ChatGPTUnofficialProxyAPIOptions, ModelConfig } from '../types'
import type { RequestOptions, SetProxyOptions, UsageResponse } from './types'

const { HttpsProxyAgent } = httpsProxyAgent

dotenv.config()

const ErrorCodeMessage: Record<string, string> = {
  401: '[OpenAI] 提供错误的API密钥 | Incorrect API key provided',
  403: '[OpenAI] 服务器拒绝访问，请稍后再试 | Server refused to access, please try again later',
  502: '[OpenAI] 错误的网关 |  Bad Gateway',
  503: '[OpenAI] 服务器繁忙，请稍后再试 | Server is busy, please try again later',
  504: '[OpenAI] 网关超时 | Gateway Time-out',
  500: '[OpenAI] 服务器繁忙，请稍后再试 | Internal Server Error',
}

const timeoutMs: number = !isNaN(+process.env.TIMEOUT_MS) ? +process.env.TIMEOUT_MS : 100 * 1000
const disableDebug: boolean = process.env.OPENAI_API_DISABLE_DEBUG === 'true'

let apiModel: ApiModel
let model = 'gpt-3.5-turbo'

function createApi(accessToken) {
  const apiKey1 = "";
  // if (!isNotEmptyString(process.env.OPENAI_API_KEY) && !isNotEmptyString(process.env[accessToken]))
  // 	throw new Error('Missing OPENAI_API_KEY or OPENAI_ACCESS_TOKEN environment variable')

  let api: ChatGPTAPI | ChatGPTUnofficialProxyAPI

  // More Info: https://github.com/transitive-bullshit/chatgpt-api

  if (isNotEmptyString(apiKey1)) {
    const OPENAI_API_BASE_URL = process.env.OPENAI_API_BASE_URL
    const OPENAI_API_MODEL = process.env.OPENAI_API_MODEL
    model = isNotEmptyString(OPENAI_API_MODEL) ? OPENAI_API_MODEL : 'gpt-3.5-turbo'

    const options: ChatGPTAPIOptions = {
      apiKey: apiKey1,
      completionParams: { model },
      debug: !disableDebug,
    }

    // increase max token limit if use gpt-4
    if (model.toLowerCase().includes('gpt-4')) {
      // if use 32k model
      if (model.toLowerCase().includes('32k')) {
        options.maxModelTokens = 32768
        options.maxResponseTokens = 8192
      }
      else {
        options.maxModelTokens = 8192
        options.maxResponseTokens = 2048
      }
    }

    if (isNotEmptyString(OPENAI_API_BASE_URL))
      options.apiBaseUrl = `${OPENAI_API_BASE_URL}/v1`

    setupProxy(options)

    api = new ChatGPTAPI({ ...options })
    apiModel = 'ChatGPTAPI'
  }
  else {
    const OPENAI_API_MODEL = process.env.OPENAI_API_MODEL
    const options: ChatGPTUnofficialProxyAPIOptions = {
       accessToken: accessToken,
      debug: !disableDebug,
    }

    if (isNotEmptyString(OPENAI_API_MODEL))
      options.model = OPENAI_API_MODEL

    options.apiReverseProxyUrl = isNotEmptyString(process.env.API_REVERSE_PROXY)
      ? process.env.API_REVERSE_PROXY
      : 'https://bypass.churchless.tech/api/conversation'

    setupProxy(options)

    api = new ChatGPTUnofficialProxyAPI({ ...options })
    apiModel = 'ChatGPTUnofficialProxyAPI'
  }
  return api
}

let beginAmount = 1
const apiMap = new Map()
const useMap = new Map()
const timeMap = new Map()
let conIdArr = []
const tokens = ["eyJhbGciOiJSUzI1NiIsInR5cCI6IkpXVCIsImtpZCI6Ik1UaEVOVUpHTkVNMVFURTRNMEZCTWpkQ05UZzVNRFUxUlRVd1FVSkRNRU13UmtGRVFrRXpSZyJ9.eyJodHRwczovL2FwaS5vcGVuYWkuY29tL3Byb2ZpbGUiOnsiZW1haWwiOiJ4bTRnOGF4cUBjaGVuZ3hpbnpoaXNoYW5nLmxpZmUiLCJlbWFpbF92ZXJpZmllZCI6dHJ1ZX0sImh0dHBzOi8vYXBpLm9wZW5haS5jb20vYXV0aCI6eyJ1c2VyX2lkIjoidXNlci1jaGQ0VG1PR3VFeUV6T2ZLNTlRazhqVnYifSwiaXNzIjoiaHR0cHM6Ly9hdXRoMC5vcGVuYWkuY29tLyIsInN1YiI6Imdvb2dsZS1vYXV0aDJ8MTE3NjUyMzkyMzIzMTYwNzY1ODMzIiwiYXVkIjpbImh0dHBzOi8vYXBpLm9wZW5haS5jb20vdjEiLCJodHRwczovL29wZW5haS5vcGVuYWkuYXV0aDBhcHAuY29tL3VzZXJpbmZvIl0sImlhdCI6MTY4MTI2NDM2NSwiZXhwIjoxNjgyNDczOTY1LCJhenAiOiJUZEpJY2JlMTZXb1RIdE45NW55eXdoNUU0eU9vNkl0RyIsInNjb3BlIjoib3BlbmlkIHByb2ZpbGUgZW1haWwgbW9kZWwucmVhZCBtb2RlbC5yZXF1ZXN0IG9yZ2FuaXphdGlvbi5yZWFkIG9mZmxpbmVfYWNjZXNzIn0.S96gM_FWQ5MNQZGSPD1WPY3XWcEtUq7jub9xLTybazum4egC3UtSQqu_f6u9KclJPYrMvYVSNtjY5yIhlv2e6SDmscHLsqyS71HgpLWl5Waj5th9D6u0fFNvPRZiA2fE1IyLwEook6blBG_euXcmpCYAh1_ThUsqnL9CWU1yc1d9iLZfCvNCxTep4xELNxJaZxtR09E3HEGHPBz9uiEdV4U4lntqi8jqpXQ_aKvo0VxBxXcCCYiWONyxHYTKeVw-bAw0oj_u1J68qAYN-gwo-s-f7aMFKfE0YuwQuSEeCDhfBXA5aO6NabXZReAKV5aR0FiZQ22QQTS39apA-KV-bw",
  "eyJhbGciOiJSUzI1NiIsInR5cCI6IkpXVCIsImtpZCI6Ik1UaEVOVUpHTkVNMVFURTRNMEZCTWpkQ05UZzVNRFUxUlRVd1FVSkRNRU13UmtGRVFrRXpSZyJ9.eyJodHRwczovL2FwaS5vcGVuYWkuY29tL3Byb2ZpbGUiOnsiZW1haWwiOiJrdWlsZWVzdWNAaG90bWFpbC5jb20iLCJlbWFpbF92ZXJpZmllZCI6dHJ1ZX0sImh0dHBzOi8vYXBpLm9wZW5haS5jb20vYXV0aCI6eyJ1c2VyX2lkIjoidXNlci11ZzVDYVQ2NWx6aDA4bVRBUEViNnJ0b1EifSwiaXNzIjoiaHR0cHM6Ly9hdXRoMC5vcGVuYWkuY29tLyIsInN1YiI6IndpbmRvd3NsaXZlfGU0NDBmNjcyZDVmNGFmMTIiLCJhdWQiOlsiaHR0cHM6Ly9hcGkub3BlbmFpLmNvbS92MSIsImh0dHBzOi8vb3BlbmFpLm9wZW5haS5hdXRoMGFwcC5jb20vdXNlcmluZm8iXSwiaWF0IjoxNjgwODUwMzY1LCJleHAiOjE2ODIwNTk5NjUsImF6cCI6IlRkSkljYmUxNldvVEh0Tjk1bnl5d2g1RTR5T282SXRHIiwic2NvcGUiOiJvcGVuaWQgcHJvZmlsZSBlbWFpbCBtb2RlbC5yZWFkIG1vZGVsLnJlcXVlc3Qgb3JnYW5pemF0aW9uLnJlYWQgb2ZmbGluZV9hY2Nlc3MifQ.zuJhORT1W7ZaDQOSByDrqRTnMUHD-O9ph0QN9gyqjsKXwB89x2Q_CpA53NrAbnbjB8mtLebDcuhfta--LTHINKwU1AGQCUIY6_jF2agPNF15GM55DJb_KURxa-YVK7f4JE8tqHouMsZopDSMRI5s2TUXCf9nh-ZvQo5yB2r4qM1qLao9tdvjvjin53-sjO-cnfdzZn8hkaKdUngg4M2G3nO2tLM1ICimp-8LM3OnbhnRlVirE13FrbAqr5gqR1vf3jsRz3_VYhvid1MU9LETSwSeB2GiHfhumO97uGXPVuqQKdSAGcHVP0KhjTMDfYF9ahYrqC41IeIXcS-cNAnTaA",
  "eyJhbGciOiJSUzI1NiIsInR5cCI6IkpXVCIsImtpZCI6Ik1UaEVOVUpHTkVNMVFURTRNMEZCTWpkQ05UZzVNRFUxUlRVd1FVSkRNRU13UmtGRVFrRXpSZyJ9.eyJodHRwczovL2FwaS5vcGVuYWkuY29tL3Byb2ZpbGUiOnsiZW1haWwiOiJ4bjVpem00dkBndWdlbml1YmkuY2MiLCJlbWFpbF92ZXJpZmllZCI6dHJ1ZX0sImh0dHBzOi8vYXBpLm9wZW5haS5jb20vYXV0aCI6eyJ1c2VyX2lkIjoidXNlci1HbEhkcUltQTBFd0hLemRwS1VzY2V1VUYifSwiaXNzIjoiaHR0cHM6Ly9hdXRoMC5vcGVuYWkuY29tLyIsInN1YiI6Imdvb2dsZS1vYXV0aDJ8MTAwMjI2NDc5MDk2MzczNzMwNDc3IiwiYXVkIjpbImh0dHBzOi8vYXBpLm9wZW5haS5jb20vdjEiLCJodHRwczovL29wZW5haS5vcGVuYWkuYXV0aDBhcHAuY29tL3VzZXJpbmZvIl0sImlhdCI6MTY4MTI2NDY0NCwiZXhwIjoxNjgyNDc0MjQ0LCJhenAiOiJUZEpJY2JlMTZXb1RIdE45NW55eXdoNUU0eU9vNkl0RyIsInNjb3BlIjoib3BlbmlkIHByb2ZpbGUgZW1haWwgbW9kZWwucmVhZCBtb2RlbC5yZXF1ZXN0IG9yZ2FuaXphdGlvbi5yZWFkIG9mZmxpbmVfYWNjZXNzIn0.v61jKwjpFwET682jGMJoD0CKYQR6l5lAOvGBcCEf4jwvQK3KUgU5o1wHzLSFDd4PykpyrHNV6EFw08GerEaIX4bvsDo1VP4lR_xfuuJPBvhhGn3rfQCEI7HVr4YVJcCGjMERLqjkaRBh9yyf_0RGYsjIfgkvfumhb0B2YUy17mAYlf9T4YNL3GkxgQeiDBgCTj_2RJutqgxt7T51zp8uuVUg8sMxnR11-ujIvbrw9i1RUij8xqODqR8QmPsUbUsq_mjks49CkGIt1Zj0gDFWbBVpvp4KLm0pyVGbq0-Zl8f1Ij3P0BnpkvWz1M8wR_yGCuD5KT9-JOF5UxecGf7hVw",
  "eyJhbGciOiJSUzI1NiIsInR5cCI6IkpXVCIsImtpZCI6Ik1UaEVOVUpHTkVNMVFURTRNMEZCTWpkQ05UZzVNRFUxUlRVd1FVSkRNRU13UmtGRVFrRXpSZyJ9.eyJodHRwczovL2FwaS5vcGVuYWkuY29tL3Byb2ZpbGUiOnsiZW1haWwiOiJ4bnMxYzBkNUBlbWFpbGh1by5jbG91ZCIsImVtYWlsX3ZlcmlmaWVkIjp0cnVlfSwiaHR0cHM6Ly9hcGkub3BlbmFpLmNvbS9hdXRoIjp7InVzZXJfaWQiOiJ1c2VyLUtRQloyTTNDa3licWNNQnJEeHJTTlhtbSJ9LCJpc3MiOiJodHRwczovL2F1dGgwLm9wZW5haS5jb20vIiwic3ViIjoiZ29vZ2xlLW9hdXRoMnwxMDUzNjA2ODU2NTU1OTg0ODkwNDUiLCJhdWQiOlsiaHR0cHM6Ly9hcGkub3BlbmFpLmNvbS92MSIsImh0dHBzOi8vb3BlbmFpLm9wZW5haS5hdXRoMGFwcC5jb20vdXNlcmluZm8iXSwiaWF0IjoxNjgxMjY0Nzc2LCJleHAiOjE2ODI0NzQzNzYsImF6cCI6IlRkSkljYmUxNldvVEh0Tjk1bnl5d2g1RTR5T282SXRHIiwic2NvcGUiOiJvcGVuaWQgcHJvZmlsZSBlbWFpbCBtb2RlbC5yZWFkIG1vZGVsLnJlcXVlc3Qgb3JnYW5pemF0aW9uLnJlYWQgb2ZmbGluZV9hY2Nlc3MifQ.Ww2Cjr4AYdVoY-3noIHKsKNiJqNMthyzMU7d7ysYtg1JzzsCsNGmUZOo9hYb0VxpBuyEwpvQlCp0kyEf89Kt7RocH4k96_C6Btc9NaSb6Rox6yuSNMv8CPGSYmfFcr8URz1BJ0lg28TeBIJYIU67t20OCutys3OjbBT_KOAAsbHMTLgbaa9JbVUKBtyIUG6AC42WrUrBiiQyaHuOVJ3jYRN0PokbFvExCLISPDQ4OkNjK-7izC5lD4Y-oaxWVj2o9kIvDP2cOQQQN6yuECRLpYgD3EPO03i3fM-in8SVRr2oKswcTNdyDdj_vMlYSzagwA47eofgnls1_8JSzF-75w",
  "eyJhbGciOiJSUzI1NiIsInR5cCI6IkpXVCIsImtpZCI6Ik1UaEVOVUpHTkVNMVFURTRNMEZCTWpkQ05UZzVNRFUxUlRVd1FVSkRNRU13UmtGRVFrRXpSZyJ9.eyJodHRwczovL2FwaS5vcGVuYWkuY29tL3Byb2ZpbGUiOnsiZW1haWwiOiJ4b3FxbGdtZkBjaGVuZ3hpbnpoaXNoYW5nLmxpZmUiLCJlbWFpbF92ZXJpZmllZCI6dHJ1ZX0sImh0dHBzOi8vYXBpLm9wZW5haS5jb20vYXV0aCI6eyJ1c2VyX2lkIjoidXNlci1IZmhWVk45eGZxcmFyNjdWSjg5RGZsdnUifSwiaXNzIjoiaHR0cHM6Ly9hdXRoMC5vcGVuYWkuY29tLyIsInN1YiI6Imdvb2dsZS1vYXV0aDJ8MTAwMTE2OTM5MDI5ODA5MjA0NDE4IiwiYXVkIjpbImh0dHBzOi8vYXBpLm9wZW5haS5jb20vdjEiLCJodHRwczovL29wZW5haS5vcGVuYWkuYXV0aDBhcHAuY29tL3VzZXJpbmZvIl0sImlhdCI6MTY4MTI2NTAxNSwiZXhwIjoxNjgyNDc0NjE1LCJhenAiOiJUZEpJY2JlMTZXb1RIdE45NW55eXdoNUU0eU9vNkl0RyIsInNjb3BlIjoib3BlbmlkIHByb2ZpbGUgZW1haWwgbW9kZWwucmVhZCBtb2RlbC5yZXF1ZXN0IG9yZ2FuaXphdGlvbi5yZWFkIG9mZmxpbmVfYWNjZXNzIn0.prmg3caIkfg_OYqHVCwBsGwjdzohMgfRmAI9WsTGWCQ9Xy4qgjyE2mF_AWIHYUQ7i1lbMQJu6DJLBfAH_98m7Hr7s81pIJJ-uaJLkS9t3WmPPZ0XdlsnL0iInAMOOvi6KFZ7JUcfJ2608GrRbaGYRatxuPSGQhLFIixslkFet1MWErxm481e7X46oJEiXXmkGBlUeXuIsiks-wuodPga0p4M49O1hpt9WZHDzCCnyF4pTGrAGhjPmU-U_-LfMnWdqy8LBLk1wcVy60Tf_7ELZAKtMtGLDzeps_SoUFN6pgl2AG_n1zCJxAGyciQ_d0Gr-U9627CFcHGlgwTiEa0AHQ",
  "eyJhbGciOiJSUzI1NiIsInR5cCI6IkpXVCIsImtpZCI6Ik1UaEVOVUpHTkVNMVFURTRNMEZCTWpkQ05UZzVNRFUxUlRVd1FVSkRNRU13UmtGRVFrRXpSZyJ9.eyJodHRwczovL2FwaS5vcGVuYWkuY29tL3Byb2ZpbGUiOnsiZW1haWwiOiJ4cG96d3IwMkBlbWFpbGh1by5jbG91ZCIsImVtYWlsX3ZlcmlmaWVkIjp0cnVlfSwiaHR0cHM6Ly9hcGkub3BlbmFpLmNvbS9hdXRoIjp7InVzZXJfaWQiOiJ1c2VyLUZVWFVUS0NpRDFzejUyemo3Q3RjY005RCJ9LCJpc3MiOiJodHRwczovL2F1dGgwLm9wZW5haS5jb20vIiwic3ViIjoiZ29vZ2xlLW9hdXRoMnwxMTE4Njk4MjcyOTgzODk1MDgyMDIiLCJhdWQiOlsiaHR0cHM6Ly9hcGkub3BlbmFpLmNvbS92MSIsImh0dHBzOi8vb3BlbmFpLm9wZW5haS5hdXRoMGFwcC5jb20vdXNlcmluZm8iXSwiaWF0IjoxNjgxMjY1MzUwLCJleHAiOjE2ODI0NzQ5NTAsImF6cCI6IlRkSkljYmUxNldvVEh0Tjk1bnl5d2g1RTR5T282SXRHIiwic2NvcGUiOiJvcGVuaWQgcHJvZmlsZSBlbWFpbCBtb2RlbC5yZWFkIG1vZGVsLnJlcXVlc3Qgb3JnYW5pemF0aW9uLnJlYWQgb2ZmbGluZV9hY2Nlc3MifQ.Qti8OL2npddiPU4tjpq8WP49JESOfGxPVPkYti3X-JNHbnrphWRoW1aJxgRm9wzd7jWqJXSInPyEfITSOQLRT2Ctr6cMPd8re7d8OFfn3U-Tz6fGw1ktD1gWz5WJqVTkvPUDjj1mO5j4N3W7Dlje95-SdvD6WRGpAvK71QjIMUZ95dsbJAG98NfbQXhcFFtDcEeqy0WAdrU8FQSFz9m5s_tfVGJGLblomnJiFwV5KFZADT_IGqrTOFSDkSVw4hnjII7KNBI5AY8hvBHy3W1_eGox-Z2LhT8JBm23xgcjkQcqw-z85AlcwSxNzzurS0WE10d00MLJyJAhAnDG_dO06g",
  "eyJhbGciOiJSUzI1NiIsInR5cCI6IkpXVCIsImtpZCI6Ik1UaEVOVUpHTkVNMVFURTRNMEZCTWpkQ05UZzVNRFUxUlRVd1FVSkRNRU13UmtGRVFrRXpSZyJ9.eyJodHRwczovL2FwaS5vcGVuYWkuY29tL3Byb2ZpbGUiOnsiZW1haWwiOiJ4czdqYWE0YUBlbWFpbGh1by5jbG91ZCIsImVtYWlsX3ZlcmlmaWVkIjp0cnVlfSwiaHR0cHM6Ly9hcGkub3BlbmFpLmNvbS9hdXRoIjp7InVzZXJfaWQiOiJ1c2VyLU9mcnVjOXVEVXV5dlh3SVQxWGQxZUNsUCJ9LCJpc3MiOiJodHRwczovL2F1dGgwLm9wZW5haS5jb20vIiwic3ViIjoiZ29vZ2xlLW9hdXRoMnwxMTE1NzI4MTI5NjExODI1NjM1NTEiLCJhdWQiOlsiaHR0cHM6Ly9hcGkub3BlbmFpLmNvbS92MSIsImh0dHBzOi8vb3BlbmFpLm9wZW5haS5hdXRoMGFwcC5jb20vdXNlcmluZm8iXSwiaWF0IjoxNjgxMjY1NTE2LCJleHAiOjE2ODI0NzUxMTYsImF6cCI6IlRkSkljYmUxNldvVEh0Tjk1bnl5d2g1RTR5T282SXRHIiwic2NvcGUiOiJvcGVuaWQgcHJvZmlsZSBlbWFpbCBtb2RlbC5yZWFkIG1vZGVsLnJlcXVlc3Qgb3JnYW5pemF0aW9uLnJlYWQgb2ZmbGluZV9hY2Nlc3MifQ.CiZTUXNDb6kQ60PIiPkIBZU3Wl9wBZw0AwxyaypC9z8cTmKFDqzXU4DTtnHQZqpeW8A7wIvXVPeGiN0XoAtuznBVCtSyce5XVx3VlaTU3SNfznPKTy0MpGtENi7RNwvhp31ify295R27Mrz4FizGrzHfHm85sPR5aNEIVWha6bkZuodQS8XnFBUIR2-uiZjlXqDl97mIO9fV_OskBUN0b8jGrSDfIur-F0g6-07GvGu11R4g2H2Y3hAwWbjUOZ8pGPDwTdSu_USTg_S7A1NSMs1RJXIX0stt_48Og46M6YxhC1aOhV-nD4lje7y4o98SUz3gWZBMPyzTexl1zwfEzA",
  "eyJhbGciOiJSUzI1NiIsInR5cCI6IkpXVCIsImtpZCI6Ik1UaEVOVUpHTkVNMVFURTRNMEZCTWpkQ05UZzVNRFUxUlRVd1FVSkRNRU13UmtGRVFrRXpSZyJ9.eyJodHRwczovL2FwaS5vcGVuYWkuY29tL3Byb2ZpbGUiOnsiZW1haWwiOiJ4dHRqajNocUBndWdlbml1YmkuY2MiLCJlbWFpbF92ZXJpZmllZCI6dHJ1ZX0sImh0dHBzOi8vYXBpLm9wZW5haS5jb20vYXV0aCI6eyJ1c2VyX2lkIjoidXNlci12UjRqcWh2NlJPQ3JiTUVxWHdLRXRuOTgifSwiaXNzIjoiaHR0cHM6Ly9hdXRoMC5vcGVuYWkuY29tLyIsInN1YiI6Imdvb2dsZS1vYXV0aDJ8MTAyNTE4Mzc3NDYxODQ0OTc4MDIxIiwiYXVkIjpbImh0dHBzOi8vYXBpLm9wZW5haS5jb20vdjEiLCJodHRwczovL29wZW5haS5vcGVuYWkuYXV0aDBhcHAuY29tL3VzZXJpbmZvIl0sImlhdCI6MTY4MTI2NTY1MCwiZXhwIjoxNjgyNDc1MjUwLCJhenAiOiJUZEpJY2JlMTZXb1RIdE45NW55eXdoNUU0eU9vNkl0RyIsInNjb3BlIjoib3BlbmlkIHByb2ZpbGUgZW1haWwgbW9kZWwucmVhZCBtb2RlbC5yZXF1ZXN0IG9yZ2FuaXphdGlvbi5yZWFkIG9mZmxpbmVfYWNjZXNzIn0.nx8KXZR82bfyIUXhdXBYOhCtRStGlkUvJhHPbwvjQhZ7C4R2xcgFRUdvK-YPqoMCq03fYLOWxPELpOj_ziMEmPVnSSizG4UbpZqCF2QGwfY5u7B0jin_4zFlYR9uJk2rSOiGwZolRLU8McMx0Hi62BoR2zCWYpxfN3O4uM-x3i8r61Rkm2UadONlwlefYsgoLQ0hfOliC4HrWGRS2d0ZKebxyc7FxHzUdXorYH1hh91Oy7UzQg57MOMsIo4i9aF562ABGNhvjyqAH5muwQlYMUdgKgtbyYnRZ9guFU7xfCqSPaTbT4RR7rUkgf--3XayVl8rDFGu_LIOnXBIG0lXlQ",
  "eyJhbGciOiJSUzI1NiIsInR5cCI6IkpXVCIsImtpZCI6Ik1UaEVOVUpHTkVNMVFURTRNMEZCTWpkQ05UZzVNRFUxUlRVd1FVSkRNRU13UmtGRVFrRXpSZyJ9.eyJodHRwczovL2FwaS5vcGVuYWkuY29tL3Byb2ZpbGUiOnsiZW1haWwiOiJ4dWtzMHB5dEBndWdlbml1YmkuY2MiLCJlbWFpbF92ZXJpZmllZCI6dHJ1ZX0sImh0dHBzOi8vYXBpLm9wZW5haS5jb20vYXV0aCI6eyJ1c2VyX2lkIjoidXNlci1UUnBzSkJFd0M0aXJqbUcyQ2lFQldyUnIifSwiaXNzIjoiaHR0cHM6Ly9hdXRoMC5vcGVuYWkuY29tLyIsInN1YiI6Imdvb2dsZS1vYXV0aDJ8MTAwNTYxNzU2MDIwMzQ1MjUxMTk1IiwiYXVkIjpbImh0dHBzOi8vYXBpLm9wZW5haS5jb20vdjEiLCJodHRwczovL29wZW5haS5vcGVuYWkuYXV0aDBhcHAuY29tL3VzZXJpbmZvIl0sImlhdCI6MTY4MTI2NTc5NCwiZXhwIjoxNjgyNDc1Mzk0LCJhenAiOiJUZEpJY2JlMTZXb1RIdE45NW55eXdoNUU0eU9vNkl0RyIsInNjb3BlIjoib3BlbmlkIHByb2ZpbGUgZW1haWwgbW9kZWwucmVhZCBtb2RlbC5yZXF1ZXN0IG9yZ2FuaXphdGlvbi5yZWFkIG9mZmxpbmVfYWNjZXNzIn0.YSbxQ4DscxaNJhrOwRyMdYcpfv6nM0qMtSupOvXxfBMGFk5wBDoVKlsWWeaE9qlDD0eScT-YOFS6HBVL3cStcPz9DeU7_jKUWZxAM0SAjEszVzA4DIVq7lgbx6i_UdrOZyPr_XB487_-a4t0qXXQAyzGfnB_KtIdL-YqV9ILRHWL-TtqvnllWp1MLDuuCECGbhFD7gCbo5jM1-0O7TFBFFn9VT6bR47xWcsPu9MVBrCZa0MszAK4mWTj6__iNLk4r9ZMsNrQioY2FtYAdzZZfOK5MZchlkYmIFQt1QeWLv8Yaz-KL2WO877FyQ0zmMzdT0GaWyFp_eUxUWuKD21vow",
  "eyJhbGciOiJSUzI1NiIsInR5cCI6IkpXVCIsImtpZCI6Ik1UaEVOVUpHTkVNMVFURTRNMEZCTWpkQ05UZzVNRFUxUlRVd1FVSkRNRU13UmtGRVFrRXpSZyJ9.eyJodHRwczovL2FwaS5vcGVuYWkuY29tL3Byb2ZpbGUiOnsiZW1haWwiOiJ4d2xmYzJuMkBjaGVuZ3hpbnpoaXNoYW5nLmxpZmUiLCJlbWFpbF92ZXJpZmllZCI6dHJ1ZX0sImh0dHBzOi8vYXBpLm9wZW5haS5jb20vYXV0aCI6eyJ1c2VyX2lkIjoidXNlci1sRmdlVHVhb2JVdnlHRWI3aW1qWFZ2UDgifSwiaXNzIjoiaHR0cHM6Ly9hdXRoMC5vcGVuYWkuY29tLyIsInN1YiI6Imdvb2dsZS1vYXV0aDJ8MTEyMzU0Nzc5MTUwNjkyODE2OTk5IiwiYXVkIjpbImh0dHBzOi8vYXBpLm9wZW5haS5jb20vdjEiLCJodHRwczovL29wZW5haS5vcGVuYWkuYXV0aDBhcHAuY29tL3VzZXJpbmZvIl0sImlhdCI6MTY4MTI2NzEwNiwiZXhwIjoxNjgyNDc2NzA2LCJhenAiOiJUZEpJY2JlMTZXb1RIdE45NW55eXdoNUU0eU9vNkl0RyIsInNjb3BlIjoib3BlbmlkIHByb2ZpbGUgZW1haWwgbW9kZWwucmVhZCBtb2RlbC5yZXF1ZXN0IG9yZ2FuaXphdGlvbi5yZWFkIG9mZmxpbmVfYWNjZXNzIn0.QB5Z7WgRroletsVqd_y6Zcc5i1Csh0fBGniAWyNhECj4AQLtioP62vjgVWC1WAhcIMzCCnslof_YDHRD-NhJfYjUOHv7ora8FWt5rCVsTrEGPQNUbbInj3U1rW9M_OO31_pid3e2IY8SmA8YOVU8SLKxpZyWDthPG8vZg6oNg32BwsjKGtOvFA99U7tlVITyrKrRLu1SQ2PQvDsxUkkR9MSxhPNth9BB8UnqCPlG92XsyOSdftnAVxuJbeICQgeyUo-7Oy4__AMLf_QWcU8e8T6AehmCM2XjZFoZEkE8Ong9NvjaGAICLVg_N1mX8y40GwrXE1NsjayK1mTtLdHIMw",
  "eyJhbGciOiJSUzI1NiIsInR5cCI6IkpXVCIsImtpZCI6Ik1UaEVOVUpHTkVNMVFURTRNMEZCTWpkQ05UZzVNRFUxUlRVd1FVSkRNRU13UmtGRVFrRXpSZyJ9.eyJodHRwczovL2FwaS5vcGVuYWkuY29tL3Byb2ZpbGUiOnsiZW1haWwiOiJ4d20xZmNlcUBlbWFpbGh1by5jbG91ZCIsImVtYWlsX3ZlcmlmaWVkIjp0cnVlfSwiaHR0cHM6Ly9hcGkub3BlbmFpLmNvbS9hdXRoIjp7InVzZXJfaWQiOiJ1c2VyLTJTYnA3VThVckxoOVpBMDc3ZTFld1YxTiJ9LCJpc3MiOiJodHRwczovL2F1dGgwLm9wZW5haS5jb20vIiwic3ViIjoiZ29vZ2xlLW9hdXRoMnwxMDExMjIzMTU1NjI5NzU1MDM1OTAiLCJhdWQiOlsiaHR0cHM6Ly9hcGkub3BlbmFpLmNvbS92MSIsImh0dHBzOi8vb3BlbmFpLm9wZW5haS5hdXRoMGFwcC5jb20vdXNlcmluZm8iXSwiaWF0IjoxNjgxMjY3NDgxLCJleHAiOjE2ODI0NzcwODEsImF6cCI6IlRkSkljYmUxNldvVEh0Tjk1bnl5d2g1RTR5T282SXRHIiwic2NvcGUiOiJvcGVuaWQgcHJvZmlsZSBlbWFpbCBtb2RlbC5yZWFkIG1vZGVsLnJlcXVlc3Qgb3JnYW5pemF0aW9uLnJlYWQgb2ZmbGluZV9hY2Nlc3MifQ.ak-dqM2OG9Gccvdw_iEeGEcHG90egJHBJDRQOcGDZFBGjxLon9PwaAW6yUxyoYrLpoDYnMG1kNYj9dy73elFC0vKbffZc5RyNqV1wecYCdC0CA-I7nX-P-wcffGlHBLAELpVrAfzoTF79i-UulcPtz8a_rg73V_Ia6PvngWTLyK9yJzPX8xlwaLU9kUmC7mWC6k4bK3I0RunX5BMaZo3qs_NFiWXDT4XdRzIJ4j7r1AuOWgqls3oPX02mxlzjeeAbUomqoIinG4OrS6pW-9n2pvG8nzC0NBOVjQL6Yrf3YLnhOJX6VfIKWnsdR87VwSVeHsrOeuLAmtOF00MVwGcAw",
  "eyJhbGciOiJSUzI1NiIsInR5cCI6IkpXVCIsImtpZCI6Ik1UaEVOVUpHTkVNMVFURTRNMEZCTWpkQ05UZzVNRFUxUlRVd1FVSkRNRU13UmtGRVFrRXpSZyJ9.eyJodHRwczovL2FwaS5vcGVuYWkuY29tL3Byb2ZpbGUiOnsiZW1haWwiOiJ0NHF5ZHlpQHpoaXNiZi50b3AiLCJlbWFpbF92ZXJpZmllZCI6dHJ1ZX0sImh0dHBzOi8vYXBpLm9wZW5haS5jb20vYXV0aCI6eyJ1c2VyX2lkIjoidXNlci1seDFvR0t5T3NDdG5tR09xbUtMVmF5QnkifSwiaXNzIjoiaHR0cHM6Ly9hdXRoMC5vcGVuYWkuY29tLyIsInN1YiI6Imdvb2dsZS1vYXV0aDJ8MTA4MjY1MzQyMjY3NjQ5MTc5NDI4IiwiYXVkIjpbImh0dHBzOi8vYXBpLm9wZW5haS5jb20vdjEiLCJodHRwczovL29wZW5haS5vcGVuYWkuYXV0aDBhcHAuY29tL3VzZXJpbmZvIl0sImlhdCI6MTY4MTI2NzcxNSwiZXhwIjoxNjgyNDc3MzE1LCJhenAiOiJUZEpJY2JlMTZXb1RIdE45NW55eXdoNUU0eU9vNkl0RyIsInNjb3BlIjoib3BlbmlkIHByb2ZpbGUgZW1haWwgbW9kZWwucmVhZCBtb2RlbC5yZXF1ZXN0IG9yZ2FuaXphdGlvbi5yZWFkIG9mZmxpbmVfYWNjZXNzIn0.ODpA8-lXr4-VFLHrOrWt6MvWVZXKD1J80XcCUi_O5aDMEmcwVinJ2CJ0SeHLgFlrNYIRFS4TeDWxQUAzcT_w1w4ePOCxaGsNG79UBxkOldM7Bwvo37wtMEWOwN4YbKzlpNbUXLVKM0ahiy9y1ym-zVeEGxpQTPR9vbAeKVF7r0BR-aJbkzjnSg8Yki1nc3dvQi8elXQDs6Poq1n4Hsz7FQ4if2T9meZziY_CUqbbsBfOljhKNmG342EGCQ5-kWxjVFPB2dLI6QkMaOXiCc6TuxkWaRUx0wkxJXCVdu9JV3SHHFLU-l2pdUH5AcdHYo8xs25I82m2LBqqlgnfLiFjoQ",
  "eyJhbGciOiJSUzI1NiIsInR5cCI6IkpXVCIsImtpZCI6Ik1UaEVOVUpHTkVNMVFURTRNMEZCTWpkQ05UZzVNRFUxUlRVd1FVSkRNRU13UmtGRVFrRXpSZyJ9.eyJodHRwczovL2FwaS5vcGVuYWkuY29tL3Byb2ZpbGUiOnsiZW1haWwiOiJ0ZDRld2R3QGtza2RjLmNvbSIsImVtYWlsX3ZlcmlmaWVkIjp0cnVlfSwiaHR0cHM6Ly9hcGkub3BlbmFpLmNvbS9hdXRoIjp7InVzZXJfaWQiOiJ1c2VyLTVObE1BVFJBVW1qaFA2MFI4ZDJZbWJmTCJ9LCJpc3MiOiJodHRwczovL2F1dGgwLm9wZW5haS5jb20vIiwic3ViIjoiZ29vZ2xlLW9hdXRoMnwxMTYwNTMwNDIxNTEwMjE5OTkwNjEiLCJhdWQiOlsiaHR0cHM6Ly9hcGkub3BlbmFpLmNvbS92MSIsImh0dHBzOi8vb3BlbmFpLm9wZW5haS5hdXRoMGFwcC5jb20vdXNlcmluZm8iXSwiaWF0IjoxNjgxMjY3Nzg0LCJleHAiOjE2ODI0NzczODQsImF6cCI6IlRkSkljYmUxNldvVEh0Tjk1bnl5d2g1RTR5T282SXRHIiwic2NvcGUiOiJvcGVuaWQgcHJvZmlsZSBlbWFpbCBtb2RlbC5yZWFkIG1vZGVsLnJlcXVlc3Qgb3JnYW5pemF0aW9uLnJlYWQgb2ZmbGluZV9hY2Nlc3MifQ.HbCk29th1fv-ZYyakIcPOZpB_45EA1kI_h88FrQk2ojsJfkjo7tlUW6D-c5s3W8NLM40v9_Z9l0g43_AnZX2EWl-1OZ39FO6dpd7LqIut56cBl0TyoKC3JO5zh5LjmmuIsZ5vSMPHcTDVNefLt-sEfCXEXrJgSEv49T3FjX-Cz1OHdlqfWSmNU6XSIhrhSELk_o_d4kW6B-nPqbHa5DTBQkEamWI-Lbi4d845DlSLv2cGV_P2MfkfR9CH0UrvRz1qDcOJlKmmHoLRy2jp8o7D7V5ab9Cvl46tgqZpKRySwR2zdPZQ2Cs_ZvhhHgALG7AjX0TU5oAnRVpR5BToNeSFA",
  "eyJhbGciOiJSUzI1NiIsInR5cCI6IkpXVCIsImtpZCI6Ik1UaEVOVUpHTkVNMVFURTRNMEZCTWpkQ05UZzVNRFUxUlRVd1FVSkRNRU13UmtGRVFrRXpSZyJ9.eyJodHRwczovL2FwaS5vcGVuYWkuY29tL3Byb2ZpbGUiOnsiZW1haWwiOiJ0Z3AyMjJjQGRhZGR5by50b3AiLCJlbWFpbF92ZXJpZmllZCI6dHJ1ZX0sImh0dHBzOi8vYXBpLm9wZW5haS5jb20vYXV0aCI6eyJ1c2VyX2lkIjoidXNlci03eFRLNlZ2bzRsd2ZVQk1kTmJDVmlkaDEifSwiaXNzIjoiaHR0cHM6Ly9hdXRoMC5vcGVuYWkuY29tLyIsInN1YiI6Imdvb2dsZS1vYXV0aDJ8MTEwMTg3NTAzOTE4MzYyMDc4MTM2IiwiYXVkIjpbImh0dHBzOi8vYXBpLm9wZW5haS5jb20vdjEiLCJodHRwczovL29wZW5haS5vcGVuYWkuYXV0aDBhcHAuY29tL3VzZXJpbmZvIl0sImlhdCI6MTY4MTI2Nzg1OCwiZXhwIjoxNjgyNDc3NDU4LCJhenAiOiJUZEpJY2JlMTZXb1RIdE45NW55eXdoNUU0eU9vNkl0RyIsInNjb3BlIjoib3BlbmlkIHByb2ZpbGUgZW1haWwgbW9kZWwucmVhZCBtb2RlbC5yZXF1ZXN0IG9yZ2FuaXphdGlvbi5yZWFkIG9mZmxpbmVfYWNjZXNzIn0.rnFf_xBWD-iZSMa_H9NyrVq7syT-RdTvib4V6ivnCar8990j4yKRYXLNzwObpjTO2C6Va6uSadJI897bbkWY2cZicgn0cPRVzTGK3nXFwrbU3cGVERk6OxZHjwvbPl3cHG5sKe6ggVw53FNhOAJwxATVqcce-UDtMx1hRxSJuLKcC0mi1VeP_tm3VN4wgML7ArWpvRXNzeIjV4XJJv6kMVFcVS3yJCZC0bQ7iN2IKWu-qqTqr369cw1gjH1HP2tqvoBHgRE1FfHxw9BVPxnOtt4smlCszT9Bmq3-EFUfTIFs-7_LZKtK9qfWt9XwKKaN3QadVn5GaLpDWTXt4d_MQg",
  "eyJhbGciOiJSUzI1NiIsInR5cCI6IkpXVCIsImtpZCI6Ik1UaEVOVUpHTkVNMVFURTRNMEZCTWpkQ05UZzVNRFUxUlRVd1FVSkRNRU13UmtGRVFrRXpSZyJ9.eyJodHRwczovL2FwaS5vcGVuYWkuY29tL3Byb2ZpbGUiOnsiZW1haWwiOiJ0dXdvcml5QHNob3VlbS5jbG91ZCIsImVtYWlsX3ZlcmlmaWVkIjp0cnVlfSwiaHR0cHM6Ly9hcGkub3BlbmFpLmNvbS9hdXRoIjp7InVzZXJfaWQiOiJ1c2VyLUhQUXFIdFBMbU5aOHhQMFA1eHc4V2h6TiJ9LCJpc3MiOiJodHRwczovL2F1dGgwLm9wZW5haS5jb20vIiwic3ViIjoiZ29vZ2xlLW9hdXRoMnwxMDAzNTU3ODQ3NzI3NDY3NDg3ODAiLCJhdWQiOlsiaHR0cHM6Ly9hcGkub3BlbmFpLmNvbS92MSIsImh0dHBzOi8vb3BlbmFpLm9wZW5haS5hdXRoMGFwcC5jb20vdXNlcmluZm8iXSwiaWF0IjoxNjgxMjg1OTcyLCJleHAiOjE2ODI0OTU1NzIsImF6cCI6IlRkSkljYmUxNldvVEh0Tjk1bnl5d2g1RTR5T282SXRHIiwic2NvcGUiOiJvcGVuaWQgcHJvZmlsZSBlbWFpbCBtb2RlbC5yZWFkIG1vZGVsLnJlcXVlc3Qgb3JnYW5pemF0aW9uLnJlYWQgb2ZmbGluZV9hY2Nlc3MifQ.MXvy2Wfe67Mz2WJiNCqyEvNHbobDkDGrBJpJ3jf5Who2orpp45ruco6K3claUX1jFzClOp4XxmtatXnRSD5eH3cluYJQ7I3wl01oaPTU4hFb_kClal1ZYjsrQIwsg6KsvAinoGFhJUNpTkmUm347pi-MTvPiKvUOl4diEE-WvpSZ2hAKYAMtFPBw1l-jkOXMtOQfykydZRXo-TLbDjEYSF3oGpISk_LU5IDMOFoWNmkIN2d0oyDe6TjfEj3JEfONrdr5xpOl792o0JKcPHW5Gvy9sd0s4hav9TUc4wu213J4qhxZsZjgA42PK8HpjOFEjbfsYpZUY0thMshkFUWyEQ",
  "eyJhbGciOiJSUzI1NiIsInR5cCI6IkpXVCIsImtpZCI6Ik1UaEVOVUpHTkVNMVFURTRNMEZCTWpkQ05UZzVNRFUxUlRVd1FVSkRNRU13UmtGRVFrRXpSZyJ9.eyJodHRwczovL2FwaS5vcGVuYWkuY29tL3Byb2ZpbGUiOnsiZW1haWwiOiJ0aTNramp1QHpoaXNiZi50b3AiLCJlbWFpbF92ZXJpZmllZCI6dHJ1ZX0sImh0dHBzOi8vYXBpLm9wZW5haS5jb20vYXV0aCI6eyJ1c2VyX2lkIjoidXNlci14OXdaV2J0aU9KcjNCY1c5OXFkRXZ6QWcifSwiaXNzIjoiaHR0cHM6Ly9hdXRoMC5vcGVuYWkuY29tLyIsInN1YiI6Imdvb2dsZS1vYXV0aDJ8MTE1MzgxMDk1MDY0MzQ4ODk2NTM3IiwiYXVkIjpbImh0dHBzOi8vYXBpLm9wZW5haS5jb20vdjEiLCJodHRwczovL29wZW5haS5vcGVuYWkuYXV0aDBhcHAuY29tL3VzZXJpbmZvIl0sImlhdCI6MTY4MTI4NjAyNiwiZXhwIjoxNjgyNDk1NjI2LCJhenAiOiJUZEpJY2JlMTZXb1RIdE45NW55eXdoNUU0eU9vNkl0RyIsInNjb3BlIjoib3BlbmlkIHByb2ZpbGUgZW1haWwgbW9kZWwucmVhZCBtb2RlbC5yZXF1ZXN0IG9yZ2FuaXphdGlvbi5yZWFkIG9mZmxpbmVfYWNjZXNzIn0.ScezkUHiS8QlRS1ssg0N8eGZnlyaXrMq0FNMnadQ5PwKmhIFQ6qIR_PrAcWUe0VUwqoikRmbC_vfONX2MT2n_Yy3I3br1v0vWkLlzOCvvbhpWQWijZJrunhd1cdK7Qb1zmJkzACo7J_zl24iBM9AFFKiA6uqO2g7tfn8UzohrGMdW_GIkAvUD2fAjyBG7Bg38FzRw8q-tQIf0Efs3VFeDNBG6XWafBppW6muOvPrbBNEzLZJkLeHb3sH2D6X13NTEh0yi3fwA2tAYUK9QR24NxhEVXXYvWmCY3cxxe9YykwyDaoJLEdKNy9iR1USkN0HbRBusub1Q_ry5lkCppcfPg",
  "eyJhbGciOiJSUzI1NiIsInR5cCI6IkpXVCIsImtpZCI6Ik1UaEVOVUpHTkVNMVFURTRNMEZCTWpkQ05UZzVNRFUxUlRVd1FVSkRNRU13UmtGRVFrRXpSZyJ9.eyJodHRwczovL2FwaS5vcGVuYWkuY29tL3Byb2ZpbGUiOnsiZW1haWwiOiJ0bmVydnNyQGRhZGR5by50b3AiLCJlbWFpbF92ZXJpZmllZCI6dHJ1ZX0sImh0dHBzOi8vYXBpLm9wZW5haS5jb20vYXV0aCI6eyJ1c2VyX2lkIjoidXNlci1ocm5jZ2luU3lEV3dmZE1vZUtDZTZ2UEQifSwiaXNzIjoiaHR0cHM6Ly9hdXRoMC5vcGVuYWkuY29tLyIsInN1YiI6Imdvb2dsZS1vYXV0aDJ8MTAzOTIyNDc4OTg4NTE5MTMyMzY3IiwiYXVkIjpbImh0dHBzOi8vYXBpLm9wZW5haS5jb20vdjEiLCJodHRwczovL29wZW5haS5vcGVuYWkuYXV0aDBhcHAuY29tL3VzZXJpbmZvIl0sImlhdCI6MTY4MTI4NjA3MCwiZXhwIjoxNjgyNDk1NjcwLCJhenAiOiJUZEpJY2JlMTZXb1RIdE45NW55eXdoNUU0eU9vNkl0RyIsInNjb3BlIjoib3BlbmlkIHByb2ZpbGUgZW1haWwgbW9kZWwucmVhZCBtb2RlbC5yZXF1ZXN0IG9yZ2FuaXphdGlvbi5yZWFkIG9mZmxpbmVfYWNjZXNzIn0.P5luRo9ZOKP3qUu-trF3jOXutmcnAmMLErTf_w0FcCpA2B7U8v2q1HpWUGoNrcOjylV_OLuIq_yfSNtCprNb1BkrqOEHOU8R2Eg-WY7TOGqKDQ2le-cM3ZfZ0TMIagxwEo2KobJBtQmN7kJ1-Hkdj6DbidirK9gJHHeiG3p8HwrZvg73HSLRXsXdCnmMK8QVz2VDremqpJxwUeJgqUymvyk2rLWjuAGpFtF1Hufonc3Vrua2ei5T0mV1qUdz2wq4gfHxum0QlTgHCBZY63AmosFCQ8HV_iO_HbG_2Yrr9lcYonIc68txHHRziNlvaL0kIV7-7Bxkp52FoPtai5L7kA",
  "eyJhbGciOiJSUzI1NiIsInR5cCI6IkpXVCIsImtpZCI6Ik1UaEVOVUpHTkVNMVFURTRNMEZCTWpkQ05UZzVNRFUxUlRVd1FVSkRNRU13UmtGRVFrRXpSZyJ9.eyJodHRwczovL2FwaS5vcGVuYWkuY29tL3Byb2ZpbGUiOnsiZW1haWwiOiJ0dW4wYXJqQHNob3VlbS5jbG91ZCIsImVtYWlsX3ZlcmlmaWVkIjp0cnVlfSwiaHR0cHM6Ly9hcGkub3BlbmFpLmNvbS9hdXRoIjp7InVzZXJfaWQiOiJ1c2VyLW9SZzlGcnc3WHQxZFlaSXNmUWUyaDg5ZiJ9LCJpc3MiOiJodHRwczovL2F1dGgwLm9wZW5haS5jb20vIiwic3ViIjoiZ29vZ2xlLW9hdXRoMnwxMDQ5NjI4MzYyMTA4MzY5MDM3NjIiLCJhdWQiOlsiaHR0cHM6Ly9hcGkub3BlbmFpLmNvbS92MSIsImh0dHBzOi8vb3BlbmFpLm9wZW5haS5hdXRoMGFwcC5jb20vdXNlcmluZm8iXSwiaWF0IjoxNjgxMjg2MTEwLCJleHAiOjE2ODI0OTU3MTAsImF6cCI6IlRkSkljYmUxNldvVEh0Tjk1bnl5d2g1RTR5T282SXRHIiwic2NvcGUiOiJvcGVuaWQgcHJvZmlsZSBlbWFpbCBtb2RlbC5yZWFkIG1vZGVsLnJlcXVlc3Qgb3JnYW5pemF0aW9uLnJlYWQgb2ZmbGluZV9hY2Nlc3MifQ.ASB7eauCQJuWUbWX_unz2sFibu4lmha5uwaEupUAGfeK5T4KUERkZ-OnlpZt6DPGDMTkOUUD2nfsYlBI8r9eg7ltEju08COCB6PqZgYVHVaHbxB65_2yTS85AsVxtDWg7Txf2CTukCYrQ9d7mE0ngwUuaMeZZDReRbIqbe4PET3MQaZ7kxpbFt3E4LAsHhXHCeNyyJ_JpMbY4rKykoSaRf_X1NDPuuxALskpaw-onD1HqgZTMLameH7U_lvCPFVWt5Au3VQu-qu--a0eeSy5GNJllo0t9zZuQlNp3XrP5ecGjfQTjOxJfhvRvyz14Gy0r_PYOe5w2bHGYyHNOz-sWQ",
  "eyJhbGciOiJSUzI1NiIsInR5cCI6IkpXVCIsImtpZCI6Ik1UaEVOVUpHTkVNMVFURTRNMEZCTWpkQ05UZzVNRFUxUlRVd1FVSkRNRU13UmtGRVFrRXpSZyJ9.eyJodHRwczovL2FwaS5vcGVuYWkuY29tL3Byb2ZpbGUiOnsiZW1haWwiOiJ1ZmFrM3lnQGtza2RjLmNvbSIsImVtYWlsX3ZlcmlmaWVkIjp0cnVlfSwiaHR0cHM6Ly9hcGkub3BlbmFpLmNvbS9hdXRoIjp7InVzZXJfaWQiOiJ1c2VyLUR6Zm9uRURobk5ualM0U3AyYWZHZjVGRyJ9LCJpc3MiOiJodHRwczovL2F1dGgwLm9wZW5haS5jb20vIiwic3ViIjoiZ29vZ2xlLW9hdXRoMnwxMDcyNTAwODU0MzA0ODM4NTc0NTQiLCJhdWQiOlsiaHR0cHM6Ly9hcGkub3BlbmFpLmNvbS92MSIsImh0dHBzOi8vb3BlbmFpLm9wZW5haS5hdXRoMGFwcC5jb20vdXNlcmluZm8iXSwiaWF0IjoxNjgxMjg2MTU3LCJleHAiOjE2ODI0OTU3NTcsImF6cCI6IlRkSkljYmUxNldvVEh0Tjk1bnl5d2g1RTR5T282SXRHIiwic2NvcGUiOiJvcGVuaWQgcHJvZmlsZSBlbWFpbCBtb2RlbC5yZWFkIG1vZGVsLnJlcXVlc3Qgb3JnYW5pemF0aW9uLnJlYWQgb2ZmbGluZV9hY2Nlc3MifQ.Pzyj5hdXdm7Naz5T1L1mdYanIiXbKxwrtVD0Dm9l_JmS4442SIMZlG9tzz9Y5JeyAIpUDVGc9SPZMGE7u2kAuLRTp1QGiJD8DwJSo8fZxl8kNPKlLrG3r7PGkU5QGbO75cbK6LmMvTgEyI3-_85Rkbdcknuj5_9EjEincxzO0D2NpB45kLmhwT1J2ksFG3yI7lypyf8fqRMBOypx231Ya36xc2tD6mUetS9kyJhCAThJ7kFtSaDg4OYYOer0ERiCEuAr8o2XYw100zMdEOyBUUzv2j81NgUFOh6TCBDiEfZA6qlR4JCD2aEztGeziwFuY-3hcTawz2on2pBeVzxvxA",
  "eyJhbGciOiJSUzI1NiIsInR5cCI6IkpXVCIsImtpZCI6Ik1UaEVOVUpHTkVNMVFURTRNMEZCTWpkQ05UZzVNRFUxUlRVd1FVSkRNRU13UmtGRVFrRXpSZyJ9.eyJodHRwczovL2FwaS5vcGVuYWkuY29tL3Byb2ZpbGUiOnsiZW1haWwiOiJ1d3dveXA0QGRhZGR5by50b3AiLCJlbWFpbF92ZXJpZmllZCI6dHJ1ZX0sImh0dHBzOi8vYXBpLm9wZW5haS5jb20vYXV0aCI6eyJ1c2VyX2lkIjoidXNlci1GSDhCQXJacFlKelJnR0lpU3dyeFpZOGYifSwiaXNzIjoiaHR0cHM6Ly9hdXRoMC5vcGVuYWkuY29tLyIsInN1YiI6Imdvb2dsZS1vYXV0aDJ8MTE0OTk2NTMxMjk5ODkxMzUxMzU5IiwiYXVkIjpbImh0dHBzOi8vYXBpLm9wZW5haS5jb20vdjEiLCJodHRwczovL29wZW5haS5vcGVuYWkuYXV0aDBhcHAuY29tL3VzZXJpbmZvIl0sImlhdCI6MTY4MTI4NjIwOSwiZXhwIjoxNjgyNDk1ODA5LCJhenAiOiJUZEpJY2JlMTZXb1RIdE45NW55eXdoNUU0eU9vNkl0RyIsInNjb3BlIjoib3BlbmlkIHByb2ZpbGUgZW1haWwgbW9kZWwucmVhZCBtb2RlbC5yZXF1ZXN0IG9yZ2FuaXphdGlvbi5yZWFkIG9mZmxpbmVfYWNjZXNzIn0.1DOfcQWzrx_xQzIG5Ef0dp5z9HaZLMfFY7Fk2kzxRvAXmID8GEOvPMH15HOiVr2HcEGxV_k5qTULRSF-ykgAnkOLIxQQp4odNM69OkI-YYNuy_XkmEH2evmlEToYClYWXvmm0mrA_m8MbOa3HiNRsd3vWuYvWC_JQaWY2_Z8p7zR0Uk_vA1-6MftqIp4bGgDQQQIcCbC5tE1aZMhwrhUfm0yG7YEG3dhq9EXcmjHqIcUcJ-ztOjCq2EU_6NTy-NBHlsjoGcdaYDJlWSu2bdrSgwtnwMQFC-cWwQOhLxKMuOcgzDgmyGeUt3sTHgZNvAnsjgiyzMNrZcIW37rkcLqsQ",
  "eyJhbGciOiJSUzI1NiIsInR5cCI6IkpXVCIsImtpZCI6Ik1UaEVOVUpHTkVNMVFURTRNMEZCTWpkQ05UZzVNRFUxUlRVd1FVSkRNRU13UmtGRVFrRXpSZyJ9.eyJodHRwczovL2FwaS5vcGVuYWkuY29tL3Byb2ZpbGUiOnsiZW1haWwiOiJ1Zm9va216QHNob3VlbS5jbG91ZCIsImVtYWlsX3ZlcmlmaWVkIjp0cnVlfSwiaHR0cHM6Ly9hcGkub3BlbmFpLmNvbS9hdXRoIjp7InVzZXJfaWQiOiJ1c2VyLTBvSFZuRk11dXU3eGxnRkJLNVNUVnpidSJ9LCJpc3MiOiJodHRwczovL2F1dGgwLm9wZW5haS5jb20vIiwic3ViIjoiZ29vZ2xlLW9hdXRoMnwxMDg4NDM3NjYwMDAzMzA4OTQxNzAiLCJhdWQiOlsiaHR0cHM6Ly9hcGkub3BlbmFpLmNvbS92MSIsImh0dHBzOi8vb3BlbmFpLm9wZW5haS5hdXRoMGFwcC5jb20vdXNlcmluZm8iXSwiaWF0IjoxNjgxMjg2MjU1LCJleHAiOjE2ODI0OTU4NTUsImF6cCI6IlRkSkljYmUxNldvVEh0Tjk1bnl5d2g1RTR5T282SXRHIiwic2NvcGUiOiJvcGVuaWQgcHJvZmlsZSBlbWFpbCBtb2RlbC5yZWFkIG1vZGVsLnJlcXVlc3Qgb3JnYW5pemF0aW9uLnJlYWQgb2ZmbGluZV9hY2Nlc3MifQ.neaIC2_Ck7CIZRwr1UqJ7r9THK9iNlGlfKXkNDK9cQsvUz-eYsYPuiyvEedhdkK5gI3HVVpEs6Aww6GClEDJMQS0paOQkrXdoj_TeDDnw1seY3VTUOFpeDBEHn7vdaB06z_xH7WwyRxfEShoHEiHtDi0WaqcGJ1XDhwcmpKnursW46qYfejN6z7Y0nSWUNZ_ExFohRLYwSU0QDi9xo6xarBoj_8Zl2HpWRUo-uNbNldnHmp1lFuMtHsmISDn3jbY2iD82bpWFjiXEMvaasvkmo2U0o8enj0ygzFIiwdhqeOaX012-KWZ1OzN6zuTqCucFnrwoIC_ciiCfpt7slmlAQ",
  "eyJhbGciOiJSUzI1NiIsInR5cCI6IkpXVCIsImtpZCI6Ik1UaEVOVUpHTkVNMVFURTRNMEZCTWpkQ05UZzVNRFUxUlRVd1FVSkRNRU13UmtGRVFrRXpSZyJ9.eyJodHRwczovL2FwaS5vcGVuYWkuY29tL3Byb2ZpbGUiOnsiZW1haWwiOiJkaG9sZGVyOTU3QGdtYWlsLmNvbSIsImVtYWlsX3ZlcmlmaWVkIjp0cnVlfSwiaHR0cHM6Ly9hcGkub3BlbmFpLmNvbS9hdXRoIjp7InVzZXJfaWQiOiJ1c2VyLVNUUzZ6QVFYMTl0NEVLVDJQZlAzYnIyQiJ9LCJpc3MiOiJodHRwczovL2F1dGgwLm9wZW5haS5jb20vIiwic3ViIjoiYXV0aDB8NjQyYmExMTM0MGI2MjE1YTdiZDRiNjY3IiwiYXVkIjpbImh0dHBzOi8vYXBpLm9wZW5haS5jb20vdjEiLCJodHRwczovL29wZW5haS5vcGVuYWkuYXV0aDBhcHAuY29tL3VzZXJpbmZvIl0sImlhdCI6MTY4MTI4NTE1OCwiZXhwIjoxNjgyNDk0NzU4LCJhenAiOiJUZEpJY2JlMTZXb1RIdE45NW55eXdoNUU0eU9vNkl0RyIsInNjb3BlIjoib3BlbmlkIHByb2ZpbGUgZW1haWwgbW9kZWwucmVhZCBtb2RlbC5yZXF1ZXN0IG9yZ2FuaXphdGlvbi5yZWFkIG9mZmxpbmVfYWNjZXNzIn0.zIB9eXJNjJc1iK_AoRD__XMopNvjT7OzbMC_mXi6Ti2CWVWxBYEDjgfKMb_GOp1kTW9tPK7T1ZLoDOp1iKCiM0NnpLQc9knTfN2RjamBFRAnFQXs2xU70iicIUSyYeCPFs3zShSbex4eS8cOzoZYbcq33ObBqsJ91HpRFr-TyJoPsx65C4yO7TCUCchS9xYDqQmPWJkpOZ8pshACgqMhhAKrEByYfFaxZNQO1V7gLlOypJcP6DUxXdEpUXFaKGNnKm7dDdACbo-LYRC7XXgt9wzUW-DSG-aa9p2BgHOkxQ77WsgPF01oTria6dtWilrRerjVXwwVSKea-qZ9FQV_Cg",
  "eyJhbGciOiJSUzI1NiIsInR5cCI6IkpXVCIsImtpZCI6Ik1UaEVOVUpHTkVNMVFURTRNMEZCTWpkQ05UZzVNRFUxUlRVd1FVSkRNRU13UmtGRVFrRXpSZyJ9.eyJodHRwczovL2FwaS5vcGVuYWkuY29tL3Byb2ZpbGUiOnsiZW1haWwiOiJiYXJuZXR0ZXNjb3RvQGdtYWlsLmNvbSIsImVtYWlsX3ZlcmlmaWVkIjp0cnVlfSwiaHR0cHM6Ly9hcGkub3BlbmFpLmNvbS9hdXRoIjp7InVzZXJfaWQiOiJ1c2VyLXU5WGhIY0w0RWtNQkhPdnhiT045OGk4TSJ9LCJpc3MiOiJodHRwczovL2F1dGgwLm9wZW5haS5jb20vIiwic3ViIjoiYXV0aDB8NjQyYmE2ZmZlOTJkN2VjNGUwM2ExY2ZlIiwiYXVkIjpbImh0dHBzOi8vYXBpLm9wZW5haS5jb20vdjEiLCJodHRwczovL29wZW5haS5vcGVuYWkuYXV0aDBhcHAuY29tL3VzZXJpbmZvIl0sImlhdCI6MTY4MTI4NTIzNSwiZXhwIjoxNjgyNDk0ODM1LCJhenAiOiJUZEpJY2JlMTZXb1RIdE45NW55eXdoNUU0eU9vNkl0RyIsInNjb3BlIjoib3BlbmlkIHByb2ZpbGUgZW1haWwgbW9kZWwucmVhZCBtb2RlbC5yZXF1ZXN0IG9yZ2FuaXphdGlvbi5yZWFkIG9mZmxpbmVfYWNjZXNzIn0.CjIwedv2691VRQytrHKLZABSzgdpqagroUKcslSv4mHpUZAE6K-S5EwJU3PtLy-JM9KWWcDLA9qfaiQYkArdGHBjE7RxYvJipSzLvMWTkTw6JPhqEgnkHKihP5m3ob-huDbB3CXlMoPRaaeYrZRLx4jsxH_hbtjLwNJUXs4i_g09c3kI35ixryGsJ-NarLMC0l1zNofKxfaCZsZ34YaBs2I7SbFmacgBRfDN7HgSqDT3qtaviwY96hnAc25dSr_OH41Cj3BKBghZKbTGeELlXilyePCWB_5hTjA3GJSUpIGTNt4tghzog3c77C2pe093pZolCnOLhY9NXrVQAcg8Lg",
  "eyJhbGciOiJSUzI1NiIsInR5cCI6IkpXVCIsImtpZCI6Ik1UaEVOVUpHTkVNMVFURTRNMEZCTWpkQ05UZzVNRFUxUlRVd1FVSkRNRU13UmtGRVFrRXpSZyJ9.eyJodHRwczovL2FwaS5vcGVuYWkuY29tL3Byb2ZpbGUiOnsiZW1haWwiOiJkdzQxMDg1NkBnbWFpbC5jb20iLCJlbWFpbF92ZXJpZmllZCI6dHJ1ZX0sImh0dHBzOi8vYXBpLm9wZW5haS5jb20vYXV0aCI6eyJ1c2VyX2lkIjoidXNlci14Vmdlbks0VXdrcExzRGllTUw1Ujg1VGcifSwiaXNzIjoiaHR0cHM6Ly9hdXRoMC5vcGVuYWkuY29tLyIsInN1YiI6ImF1dGgwfDY0MmJhMGYyZDIzMjhlZmRiZDQzMzYyOCIsImF1ZCI6WyJodHRwczovL2FwaS5vcGVuYWkuY29tL3YxIiwiaHR0cHM6Ly9vcGVuYWkub3BlbmFpLmF1dGgwYXBwLmNvbS91c2VyaW5mbyJdLCJpYXQiOjE2ODEyODUyNzAsImV4cCI6MTY4MjQ5NDg3MCwiYXpwIjoiVGRKSWNiZTE2V29USHROOTVueXl3aDVFNHlPbzZJdEciLCJzY29wZSI6Im9wZW5pZCBwcm9maWxlIGVtYWlsIG1vZGVsLnJlYWQgbW9kZWwucmVxdWVzdCBvcmdhbml6YXRpb24ucmVhZCBvZmZsaW5lX2FjY2VzcyJ9.OnGbmCfArxmFUdEj0MEsc4ckV2YV4D8jZhitbLJvJrdL4hUXP93F3d66Yz1oAxHy3ytpSD7MJjw_YQWaEqGamJaTK-e8tMVWRVcC6srGT2kMzBjwCd50FjHQTFA49QZ7gf8Ytrvcx92c5kFlkDPWjRj79Cqf-xoOX33GzN2ojAueGvNCvzL_O5C5gw-KdWPr5ySnb4gKm-WsKPB4M7xFlDKtFuy-5H4oBo-JthBd3Wo_qiD56Cx5OHBSfwYUXRONoEvqXHbuBCdmiwiqVZgoNVWyL4kg7vTxX21yOZmikpL7znyZCG2t8xQV-uRZE5_bwY9do787d2xMn1FdJgK-Sg",
  "eyJhbGciOiJSUzI1NiIsInR5cCI6IkpXVCIsImtpZCI6Ik1UaEVOVUpHTkVNMVFURTRNMEZCTWpkQ05UZzVNRFUxUlRVd1FVSkRNRU13UmtGRVFrRXpSZyJ9.eyJodHRwczovL2FwaS5vcGVuYWkuY29tL3Byb2ZpbGUiOnsiZW1haWwiOiJpcm9uZnJlbmNoOUBnbWFpbC5jb20iLCJlbWFpbF92ZXJpZmllZCI6dHJ1ZX0sImh0dHBzOi8vYXBpLm9wZW5haS5jb20vYXV0aCI6eyJ1c2VyX2lkIjoidXNlci1mNE9BZ2J0QzZNcUFmRHJ2QmdEall1ZTcifSwiaXNzIjoiaHR0cHM6Ly9hdXRoMC5vcGVuYWkuY29tLyIsInN1YiI6ImF1dGgwfDY0MmJhYzJiMzE2MjEwYjg1Y2VhNTkwZCIsImF1ZCI6WyJodHRwczovL2FwaS5vcGVuYWkuY29tL3YxIiwiaHR0cHM6Ly9vcGVuYWkub3BlbmFpLmF1dGgwYXBwLmNvbS91c2VyaW5mbyJdLCJpYXQiOjE2ODEyODU1MDgsImV4cCI6MTY4MjQ5NTEwOCwiYXpwIjoiVGRKSWNiZTE2V29USHROOTVueXl3aDVFNHlPbzZJdEciLCJzY29wZSI6Im9wZW5pZCBwcm9maWxlIGVtYWlsIG1vZGVsLnJlYWQgbW9kZWwucmVxdWVzdCBvcmdhbml6YXRpb24ucmVhZCBvZmZsaW5lX2FjY2VzcyJ9.isr0ZkcC9sa6bofisMTrWXvsb0Xc5ZH1Ou9xxILhi_0290AJsM02sKyDAV-8T0WQglpZpmVIeS9iYSIAC-BqZDj8xlsYZb4kQH0stgQG2jjbsT4hikxXmWH94hmkq-GDx8yo9Nq18x-pyw3cLwtGrSXfQnXfZBxKOpiyDWQA1iUHRSgupsg1BF-SOMSDvznmuKkh5JX5okqtLvNLTlzqBRFgM84HEu3Kno0Hh_i79ZNf6bM96bY0kCB9v-dbRRnsx5rytFAyS74xgxXtkkfKZY7SI6PuxQNrV7urICxeCXDJtukyCbP_5k7AzvoC-6YFzOOlTwyXeIHZ1v640Z6jmQ",
  "eyJhbGciOiJSUzI1NiIsInR5cCI6IkpXVCIsImtpZCI6Ik1UaEVOVUpHTkVNMVFURTRNMEZCTWpkQ05UZzVNRFUxUlRVd1FVSkRNRU13UmtGRVFrRXpSZyJ9.eyJodHRwczovL2FwaS5vcGVuYWkuY29tL3Byb2ZpbGUiOnsiZW1haWwiOiJtcnBhbGk0QHpoaXNiZi50b3AiLCJlbWFpbF92ZXJpZmllZCI6dHJ1ZX0sImh0dHBzOi8vYXBpLm9wZW5haS5jb20vYXV0aCI6eyJ1c2VyX2lkIjoidXNlci1oWU5HVDh0ZVJMUXNlMFFHUDFjajhtZVMifSwiaXNzIjoiaHR0cHM6Ly9hdXRoMC5vcGVuYWkuY29tLyIsInN1YiI6Imdvb2dsZS1vYXV0aDJ8MTEwNzA2NDI5ODA1NTI0NTYxNjk4IiwiYXVkIjpbImh0dHBzOi8vYXBpLm9wZW5haS5jb20vdjEiLCJodHRwczovL29wZW5haS5vcGVuYWkuYXV0aDBhcHAuY29tL3VzZXJpbmZvIl0sImlhdCI6MTY4MTQ1ODQxMywiZXhwIjoxNjgyNjY4MDEzLCJhenAiOiJUZEpJY2JlMTZXb1RIdE45NW55eXdoNUU0eU9vNkl0RyIsInNjb3BlIjoib3BlbmlkIHByb2ZpbGUgZW1haWwgbW9kZWwucmVhZCBtb2RlbC5yZXF1ZXN0IG9yZ2FuaXphdGlvbi5yZWFkIG9mZmxpbmVfYWNjZXNzIn0.fPs-XTOBPvg-CaXAxWcJkUHvDGCBprHOtPBcuZ9OC49oyFYFUg72GxmQDUlF6SpdaUr2ZRBHHgjPq0WYZ5wlZMyrcqsYCvFMMhAUyKdsxAg5zkayy_jx3aD7MwZvtiEgNZo-P32n-436jj8jCz1550VKRIU9L31yDeKZcaNYvgOVRZraqrHlLHZjl32X-u7eQ1PQ_-ZFyOXhQ6w4mD2Al_4NEjjTOFvp6KYJYzJ7nf3hInqPpilzl6VkvD2rGG0o-k-zUhBdoYT-vIKWw5N1dYLfdzoUMD4AuiQUbglnPz-Nz3fY9cETNFzYSC5LMSTrbqSLl0D7qZXPDolEJ9vGrA",
  "eyJhbGciOiJSUzI1NiIsInR5cCI6IkpXVCIsImtpZCI6Ik1UaEVOVUpHTkVNMVFURTRNMEZCTWpkQ05UZzVNRFUxUlRVd1FVSkRNRU13UmtGRVFrRXpSZyJ9.eyJodHRwczovL2FwaS5vcGVuYWkuY29tL3Byb2ZpbGUiOnsiZW1haWwiOiJuNnlteG00QHpoaXNiZi50b3AiLCJlbWFpbF92ZXJpZmllZCI6dHJ1ZX0sImh0dHBzOi8vYXBpLm9wZW5haS5jb20vYXV0aCI6eyJ1c2VyX2lkIjoidXNlci1rRm9kN1FIVU1xZUVvMExvcW9GQXlBcDgifSwiaXNzIjoiaHR0cHM6Ly9hdXRoMC5vcGVuYWkuY29tLyIsInN1YiI6Imdvb2dsZS1vYXV0aDJ8MTEwNDI5NzMxOTc2MTAzNzgzNzI0IiwiYXVkIjpbImh0dHBzOi8vYXBpLm9wZW5haS5jb20vdjEiLCJodHRwczovL29wZW5haS5vcGVuYWkuYXV0aDBhcHAuY29tL3VzZXJpbmZvIl0sImlhdCI6MTY4MTQ1OTAzOSwiZXhwIjoxNjgyNjY4NjM5LCJhenAiOiJUZEpJY2JlMTZXb1RIdE45NW55eXdoNUU0eU9vNkl0RyIsInNjb3BlIjoib3BlbmlkIHByb2ZpbGUgZW1haWwgbW9kZWwucmVhZCBtb2RlbC5yZXF1ZXN0IG9yZ2FuaXphdGlvbi5yZWFkIG9mZmxpbmVfYWNjZXNzIn0.Yey_yTxz59El9klR4s8klF2BwZWyrWCuVEjQJXxN3fHmBM73hgZDLAlmDdV67fpsny5MFgqygTVxC909fuQIrlsLv5WBdlj1J3LcoKCxH-B8u2T7-WFoRg9HYYzW1F_Btr2Q0jdOrQe9DEST5CM92dLWbnIfAyl8GLTwUieqMicmGvzg2UZ3RFQM0vlaIueyZH_Wg6EMAqknyMWcc2sktbwYrJNrDHIs2TJYXuUw6QuwAt7R06FCaa3bvMK8IpNNae5egqFO6JukFeTX6u3sggh-Ls8228bfATnpPOAcBdT5dv9OFBBDE1egjpEbf-ys5SnWfktbBz2E4tunCHgjEw",
  "eyJhbGciOiJSUzI1NiIsInR5cCI6IkpXVCIsImtpZCI6Ik1UaEVOVUpHTkVNMVFURTRNMEZCTWpkQ05UZzVNRFUxUlRVd1FVSkRNRU13UmtGRVFrRXpSZyJ9.eyJodHRwczovL2FwaS5vcGVuYWkuY29tL3Byb2ZpbGUiOnsiZW1haWwiOiJuOWJmNXcxQGtza2RjLmNvbSIsImVtYWlsX3ZlcmlmaWVkIjp0cnVlfSwiaHR0cHM6Ly9hcGkub3BlbmFpLmNvbS9hdXRoIjp7InVzZXJfaWQiOiJ1c2VyLUZ2Y3RYbG43dVFKbmt3NUJiMnFRb3hZWCJ9LCJpc3MiOiJodHRwczovL2F1dGgwLm9wZW5haS5jb20vIiwic3ViIjoiZ29vZ2xlLW9hdXRoMnwxMDY3NDA0MzEwODEzOTgxODA4MjgiLCJhdWQiOlsiaHR0cHM6Ly9hcGkub3BlbmFpLmNvbS92MSIsImh0dHBzOi8vb3BlbmFpLm9wZW5haS5hdXRoMGFwcC5jb20vdXNlcmluZm8iXSwiaWF0IjoxNjgxNDU5MDgzLCJleHAiOjE2ODI2Njg2ODMsImF6cCI6IlRkSkljYmUxNldvVEh0Tjk1bnl5d2g1RTR5T282SXRHIiwic2NvcGUiOiJvcGVuaWQgcHJvZmlsZSBlbWFpbCBtb2RlbC5yZWFkIG1vZGVsLnJlcXVlc3Qgb3JnYW5pemF0aW9uLnJlYWQgb2ZmbGluZV9hY2Nlc3MifQ.CDRsovxCUBB1Q_5f_FyKLpNT2IkgvMDZw0hPNgXHIXX5s9L8FdN86qkYIJuMIUn3x2RJGTAi4sngl8XI9GifC1xBtTEpaf6zI9E_-2vDgX_jpFmljmEly_DVUZQiAtQBdFaZ70OFwX3up83dCvIOklsW_wu6BaaigkRSfJTjkuRPmgUnO61kvLbsCfkJJ--OQiIP_WG035ahBlv6Le9dNP92dJprK-KjMZpynHwzjSdWqY2e8bOD-Gu8c2eV00Oxw842ZGrMXXDABvVJI3Z_qjy9QmxZxhMdTmtVRKqk4k03oHqRSNxFK-sSVDHixrQe3FNIY3fSS2QMypF_cbwLkQ",
  "eyJhbGciOiJSUzI1NiIsInR5cCI6IkpXVCIsImtpZCI6Ik1UaEVOVUpHTkVNMVFURTRNMEZCTWpkQ05UZzVNRFUxUlRVd1FVSkRNRU13UmtGRVFrRXpSZyJ9.eyJodHRwczovL2FwaS5vcGVuYWkuY29tL3Byb2ZpbGUiOnsiZW1haWwiOiJvMnpiZ3l5QHNob3VlbS5jbG91ZCIsImVtYWlsX3ZlcmlmaWVkIjp0cnVlfSwiaHR0cHM6Ly9hcGkub3BlbmFpLmNvbS9hdXRoIjp7InVzZXJfaWQiOiJ1c2VyLXVlbFk2VWE2RkIzZFVxRzFGc0JXWWxibiJ9LCJpc3MiOiJodHRwczovL2F1dGgwLm9wZW5haS5jb20vIiwic3ViIjoiZ29vZ2xlLW9hdXRoMnwxMDc0NDUyNjI4ODA2NzgwODM4NTIiLCJhdWQiOlsiaHR0cHM6Ly9hcGkub3BlbmFpLmNvbS92MSIsImh0dHBzOi8vb3BlbmFpLm9wZW5haS5hdXRoMGFwcC5jb20vdXNlcmluZm8iXSwiaWF0IjoxNjgxNDYwNTA5LCJleHAiOjE2ODI2NzAxMDksImF6cCI6IlRkSkljYmUxNldvVEh0Tjk1bnl5d2g1RTR5T282SXRHIiwic2NvcGUiOiJvcGVuaWQgcHJvZmlsZSBlbWFpbCBtb2RlbC5yZWFkIG1vZGVsLnJlcXVlc3Qgb3JnYW5pemF0aW9uLnJlYWQgb2ZmbGluZV9hY2Nlc3MifQ.BHsuXZaIfIBgL_o6mNkBx9iVYDwYjm2H6DF69qb4UDaIrS5PxZ_LQQ8BJgocHbGfu1Y1f-z8ajD_SCqLmFLt4o0gWyeYY3HoZl5ErYcFPj6mgNaUvOERpCH82N6Z34sHI2yDagJ8ZMg7JxHgabVpAshWn4CRyefZ0buEzMjVuh3X_R6oM0m2fLWY00pGZygXG3s2jt5Ny9wCxQjxAjetS1rfqg3x21PAZ94_BwkOD9UnZx59DmgLmH1msIvW8maWX6oXxfxVfO7HeIVsTjQoBZqwv06AB39feAFBAVnDEHJMHt9oacQf1zbMfBotxkgdllsu-1Aaa51Fk9fCQY_RkQ",
  "eyJhbGciOiJSUzI1NiIsInR5cCI6IkpXVCIsImtpZCI6Ik1UaEVOVUpHTkVNMVFURTRNMEZCTWpkQ05UZzVNRFUxUlRVd1FVSkRNRU13UmtGRVFrRXpSZyJ9.eyJodHRwczovL2FwaS5vcGVuYWkuY29tL3Byb2ZpbGUiOnsiZW1haWwiOiJvMm9kYWpqQHNob3VlbS5jbG91ZCIsImVtYWlsX3ZlcmlmaWVkIjp0cnVlfSwiaHR0cHM6Ly9hcGkub3BlbmFpLmNvbS9hdXRoIjp7InVzZXJfaWQiOiJ1c2VyLXBZZ29Oc2dWZ0FvVzMzdGgyUnM2TXhKaiJ9LCJpc3MiOiJodHRwczovL2F1dGgwLm9wZW5haS5jb20vIiwic3ViIjoiZ29vZ2xlLW9hdXRoMnwxMDE0MzA2NzQwNTY5MTA0MDkyMTQiLCJhdWQiOlsiaHR0cHM6Ly9hcGkub3BlbmFpLmNvbS92MSIsImh0dHBzOi8vb3BlbmFpLm9wZW5haS5hdXRoMGFwcC5jb20vdXNlcmluZm8iXSwiaWF0IjoxNjgxNDYwNTU4LCJleHAiOjE2ODI2NzAxNTgsImF6cCI6IlRkSkljYmUxNldvVEh0Tjk1bnl5d2g1RTR5T282SXRHIiwic2NvcGUiOiJvcGVuaWQgcHJvZmlsZSBlbWFpbCBtb2RlbC5yZWFkIG1vZGVsLnJlcXVlc3Qgb3JnYW5pemF0aW9uLnJlYWQgb2ZmbGluZV9hY2Nlc3MifQ.0lktrKxmHGygC5v4SviaANS1ntmG7hbXqK5NBXoodjZwTFG59cNuSH9iBr-BvlSoprpTZ-HExtlCzEkf1CVNcoZbxFQAwvW6qYVQhUF-sXvb7Ex5vWgz1trk8HTKVBO5AlmDEL-7bTMGEWS4kVHyv52mvYeW15ukqvcRUq7UvVgEZn7wKkkxEpU1i7XGuWByczpbPIzqJ0Ese1BI3JmYEyP86E8PNmulv24mLXctx6-y5lsBpUO4xFLZm4oRvq3AKLNIWh9z9efsx5K_ZYAzfymnuI1AxWzHTMSaD7VTzrQn9cZljIQxKQWQaTysPpbb4b0LPmVepHU2-bxBzDpCYg",
  "eyJhbGciOiJSUzI1NiIsInR5cCI6IkpXVCIsImtpZCI6Ik1UaEVOVUpHTkVNMVFURTRNMEZCTWpkQ05UZzVNRFUxUlRVd1FVSkRNRU13UmtGRVFrRXpSZyJ9.eyJodHRwczovL2FwaS5vcGVuYWkuY29tL3Byb2ZpbGUiOnsiZW1haWwiOiJvanZnZnZhQHpoaXNiZi50b3AiLCJlbWFpbF92ZXJpZmllZCI6dHJ1ZX0sImh0dHBzOi8vYXBpLm9wZW5haS5jb20vYXV0aCI6eyJ1c2VyX2lkIjoidXNlci04YXJQOFdWVk02WnQ2M3hGNWlGNzhOSVoifSwiaXNzIjoiaHR0cHM6Ly9hdXRoMC5vcGVuYWkuY29tLyIsInN1YiI6Imdvb2dsZS1vYXV0aDJ8MTEwMTQ4NzQzMjM4MzI2MTQ0MjI5IiwiYXVkIjpbImh0dHBzOi8vYXBpLm9wZW5haS5jb20vdjEiLCJodHRwczovL29wZW5haS5vcGVuYWkuYXV0aDBhcHAuY29tL3VzZXJpbmZvIl0sImlhdCI6MTY4MTQ2MDU5OSwiZXhwIjoxNjgyNjcwMTk5LCJhenAiOiJUZEpJY2JlMTZXb1RIdE45NW55eXdoNUU0eU9vNkl0RyIsInNjb3BlIjoib3BlbmlkIHByb2ZpbGUgZW1haWwgbW9kZWwucmVhZCBtb2RlbC5yZXF1ZXN0IG9yZ2FuaXphdGlvbi5yZWFkIG9mZmxpbmVfYWNjZXNzIn0.rhAMFt6PdhbStC_PVGB2McEIpnJYB_ITI0lnydJs8Sfvmtlf5_q0LnaaDWyYq-HlsD9iDEOg7hwznR2ONBzpnzKOHTFy_vw14hO9BM3oQYeUaH7H9MDY4auzdTLrCVsxu9J5YPBExcLOaItuWpkW7DS8Cc8vIWWeUztuaAFQN83HZ-_X9Q_8it1FEsHWfwZL60He5IpTxtuxRga-ragSAm9i5Mxb0HTMZlc3p2MNvj0bDFh7TKQauDfXEIKsMM8e6czPru5H07BJlBIgJ0TVWkjx4ziBIeVQqIRFDgHvxjX57NwEbEp_p4HJNU_2T9nbpw9QnNETfpf7aYS3PwoRZw",
  "eyJhbGciOiJSUzI1NiIsInR5cCI6IkpXVCIsImtpZCI6Ik1UaEVOVUpHTkVNMVFURTRNMEZCTWpkQ05UZzVNRFUxUlRVd1FVSkRNRU13UmtGRVFrRXpSZyJ9.eyJodHRwczovL2FwaS5vcGVuYWkuY29tL3Byb2ZpbGUiOnsiZW1haWwiOiJvaW0ycGFpQGRhZGR5by50b3AiLCJlbWFpbF92ZXJpZmllZCI6dHJ1ZX0sImh0dHBzOi8vYXBpLm9wZW5haS5jb20vYXV0aCI6eyJ1c2VyX2lkIjoidXNlci1IR2JyVHl2d3FOS0JsOHFGYUhTd2tJRTIifSwiaXNzIjoiaHR0cHM6Ly9hdXRoMC5vcGVuYWkuY29tLyIsInN1YiI6Imdvb2dsZS1vYXV0aDJ8MTA4ODc4MjkzNzU1ODUzNjgwNDgxIiwiYXVkIjpbImh0dHBzOi8vYXBpLm9wZW5haS5jb20vdjEiLCJodHRwczovL29wZW5haS5vcGVuYWkuYXV0aDBhcHAuY29tL3VzZXJpbmZvIl0sImlhdCI6MTY4MTQ2MDY0MCwiZXhwIjoxNjgyNjcwMjQwLCJhenAiOiJUZEpJY2JlMTZXb1RIdE45NW55eXdoNUU0eU9vNkl0RyIsInNjb3BlIjoib3BlbmlkIHByb2ZpbGUgZW1haWwgbW9kZWwucmVhZCBtb2RlbC5yZXF1ZXN0IG9yZ2FuaXphdGlvbi5yZWFkIG9mZmxpbmVfYWNjZXNzIn0.yXf1kjyttJEdPgLLAzqdaMdRi7zn7S49XiUl45PMCnVBPga_nPUZXPfZdNlyGfRnlcLJzcNJ_R5wrToS8VfaNuzs68FNwaIEf858mK-9pyR214RQhXDPPRev86vPjijE7ty8SexnQ1hEY0uPbBOe6RyQMSVNqeQninXjSXY-HqLPxlkQM8quWpQNmD2g9lHQni5fMsQTq-f99c5Enf2ukjf-hyXkJXdn3dzFcs6SwSbFDpWBeqNcvC7Fu4e4QWDzXvQLu43X3Ul7WFr3-Tk3BLUO3EHQzwkHRQYhmX9_PW7pjYLFhYp4yjLii8AfjppdJsCI82awgKDNRvFnshvzFQ",
  "eyJhbGciOiJSUzI1NiIsInR5cCI6IkpXVCIsImtpZCI6Ik1UaEVOVUpHTkVNMVFURTRNMEZCTWpkQ05UZzVNRFUxUlRVd1FVSkRNRU13UmtGRVFrRXpSZyJ9.eyJodHRwczovL2FwaS5vcGVuYWkuY29tL3Byb2ZpbGUiOnsiZW1haWwiOiJwaWRlb24yQHpoaXNiZi50b3AiLCJlbWFpbF92ZXJpZmllZCI6dHJ1ZX0sImh0dHBzOi8vYXBpLm9wZW5haS5jb20vYXV0aCI6eyJ1c2VyX2lkIjoidXNlci15SmJXMUp0TVlTamRxUFUweFVSS1cyVXIifSwiaXNzIjoiaHR0cHM6Ly9hdXRoMC5vcGVuYWkuY29tLyIsInN1YiI6Imdvb2dsZS1vYXV0aDJ8MTA4MjM1NjI0MDcxMTg4Mzc2MTA0IiwiYXVkIjpbImh0dHBzOi8vYXBpLm9wZW5haS5jb20vdjEiLCJodHRwczovL29wZW5haS5vcGVuYWkuYXV0aDBhcHAuY29tL3VzZXJpbmZvIl0sImlhdCI6MTY4MTQ2Mjg2MCwiZXhwIjoxNjgyNjcyNDYwLCJhenAiOiJUZEpJY2JlMTZXb1RIdE45NW55eXdoNUU0eU9vNkl0RyIsInNjb3BlIjoib3BlbmlkIHByb2ZpbGUgZW1haWwgbW9kZWwucmVhZCBtb2RlbC5yZXF1ZXN0IG9yZ2FuaXphdGlvbi5yZWFkIG9mZmxpbmVfYWNjZXNzIn0.ojP0WxyfyitLVlZ6ixLzyjX4EgPO7KEmvoImPlm6MBHzDWqOcRu-cXBG5Qje7CdSR04k6ixr5N65GtlZ1FfVNYuVvNaMfPdpt5UQ3JB_6YMgTrZTkXj6iNH_UdzWXjVpEOuthHKHT7IYXfVzCscFvGjWdCWeUglB_MPLZgJJrZC3FqZFRMA6xiwShCkpy3GmGEYXN9ZXi8NARumVNEJGRdb4x3lWr_nA5Ncr0T2gZ5A7kjHjiS09vIH2bG-jZFRO_eFh3RJxELvZQli50T6cxDVd7XbYwz70teTqCzfK4RFbi0EvrxY3oSZuxqOnF7lW-9BBsDYxA8BV_A9xIj9kUw",
  "eyJhbGciOiJSUzI1NiIsInR5cCI6IkpXVCIsImtpZCI6Ik1UaEVOVUpHTkVNMVFURTRNMEZCTWpkQ05UZzVNRFUxUlRVd1FVSkRNRU13UmtGRVFrRXpSZyJ9.eyJodHRwczovL2FwaS5vcGVuYWkuY29tL3Byb2ZpbGUiOnsiZW1haWwiOiJyM3kzcWE4QHpoaXNiZi50b3AiLCJlbWFpbF92ZXJpZmllZCI6dHJ1ZX0sImh0dHBzOi8vYXBpLm9wZW5haS5jb20vYXV0aCI6eyJ1c2VyX2lkIjoidXNlci01T2ZtQkh0TjQ2T29ON1o5Z1pCMUhMdlkifSwiaXNzIjoiaHR0cHM6Ly9hdXRoMC5vcGVuYWkuY29tLyIsInN1YiI6Imdvb2dsZS1vYXV0aDJ8MTE1NzIzOTUwMTk3MTE3MjcwMjk1IiwiYXVkIjpbImh0dHBzOi8vYXBpLm9wZW5haS5jb20vdjEiLCJodHRwczovL29wZW5haS5vcGVuYWkuYXV0aDBhcHAuY29tL3VzZXJpbmZvIl0sImlhdCI6MTY4MTQ2Mjk4MSwiZXhwIjoxNjgyNjcyNTgxLCJhenAiOiJUZEpJY2JlMTZXb1RIdE45NW55eXdoNUU0eU9vNkl0RyIsInNjb3BlIjoib3BlbmlkIHByb2ZpbGUgZW1haWwgbW9kZWwucmVhZCBtb2RlbC5yZXF1ZXN0IG9yZ2FuaXphdGlvbi5yZWFkIG9mZmxpbmVfYWNjZXNzIn0.0lDyceQLJ2y0w-br_UxFd1yrnwtBjgnJKRkoPNZDkrlz3ClekJL8XFTFeLQiAa5_u_yqonIzWRJRFZor-FcebG9ll6Boi2ajrnQbpHo9EI3CUcXNb8CwoNm1T9ArIfktSdsHml_z0cMITQgKkaU5VdzitnLYLgeCx19l0i92i_yfCE4IGlRxAWTLg5i-WMAUb2Hww43vCWVVhsgW8VSxRnKKdbRaoVZzvQ9_cNL1VFtGHG9z967tsa2HNXVeJPOIsmhaN7GXpHLZtSy8w3lRfHdYmGXxvQWoyD57PnT-pmkaKaPLuEUZcInmAUWGTSzNdMtpF5xQuRldkTSNe28LJQ",
  "eyJhbGciOiJSUzI1NiIsInR5cCI6IkpXVCIsImtpZCI6Ik1UaEVOVUpHTkVNMVFURTRNMEZCTWpkQ05UZzVNRFUxUlRVd1FVSkRNRU13UmtGRVFrRXpSZyJ9.eyJodHRwczovL2FwaS5vcGVuYWkuY29tL3Byb2ZpbGUiOnsiZW1haWwiOiJyNGxmdG92QGtza2RjLmNvbSIsImVtYWlsX3ZlcmlmaWVkIjp0cnVlfSwiaHR0cHM6Ly9hcGkub3BlbmFpLmNvbS9hdXRoIjp7InVzZXJfaWQiOiJ1c2VyLXBzTk1MZkhHUUI0aEZNbVVwaHVpajNKVyJ9LCJpc3MiOiJodHRwczovL2F1dGgwLm9wZW5haS5jb20vIiwic3ViIjoiZ29vZ2xlLW9hdXRoMnwxMTI2MTg1ODA3NzE4NTMwMDQ3NjIiLCJhdWQiOlsiaHR0cHM6Ly9hcGkub3BlbmFpLmNvbS92MSIsImh0dHBzOi8vb3BlbmFpLm9wZW5haS5hdXRoMGFwcC5jb20vdXNlcmluZm8iXSwiaWF0IjoxNjgxNDYzMDQ1LCJleHAiOjE2ODI2NzI2NDUsImF6cCI6IlRkSkljYmUxNldvVEh0Tjk1bnl5d2g1RTR5T282SXRHIiwic2NvcGUiOiJvcGVuaWQgcHJvZmlsZSBlbWFpbCBtb2RlbC5yZWFkIG1vZGVsLnJlcXVlc3Qgb3JnYW5pemF0aW9uLnJlYWQgb2ZmbGluZV9hY2Nlc3MifQ.TlGfkxxOb2k1il_S09WefEtjZ3FJlTHefY8VNc-daMGbFsNwySXw7WgV7YWJi7eASZtpM_FqKJYfpD3NTe-MHtHQn8rDngLgDhaD_FCxEO0tztTM3TN4JjUqQXwbfg-dhHue826ZOxZNoiBYR7EVO20LHUljvTuUkC8u_hZwYbNkvYDX6LBdEk0lUE3S_ymu3qIscuG5nPqTtCR86w6W-VG5V-wMHeBK6zzgQHOTIKHbwFHjiejJ6rdRtbhhgPVzLfjeJsf-2_ADTI5ivlWTQFXcBqjlAH5WKG1XinRBkfkORmcYEDzX1ujmjZ33Zv7swubXbe2DtxpCuw7aL9CKuA"
]


const apiArr: (ChatGPTAPI | ChatGPTUnofficialProxyAPI)[] = []
for (let i = 0; i < 60; i++) {

  //const api = createApi(tokens[i])
  const api = createApi(process.env[`OPENAI_ACCESS_TOKEN${i}`])
  //const api = createApi("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")
  apiArr.push(api)
  apiMap.set(api, false)
}

//const aaa = setInterval(doClear, 86400000)

function doClear() {
  const lsArr = []
  for (let i = 0; i < conIdArr.length; i++) {
    const conIdNow = conIdArr[i]
    const datenow = timeMap.get(conIdNow)
    useMap.clear()
    const NowDate = (new Date()).valueOf()
    if ((NowDate - datenow) >= 172800000) {
      timeMap.delete(conIdNow)
      useMap.delete(conIdNow)
    }
    else {
      lsArr.push(conIdNow)
    }
  }
  conIdArr = lsArr
}
// console.log(JSON.stringify(apiArr))
/* function findUseApi() {
  const len: number = apiArr.length
  for (let i = 0; i < len; i++) {
    const flag = apiMap.get(apiArr[i])
    if(!flag) {return apiArr[i]}
  }
  return false
  //const willGet = beginAmount % baseAmount
} */
function findUseApi() {
  const len: number = apiArr.length
  // console.log("len:{}"+len)
  // console.log("beginAmount-1:{}"+(beginAmount-1))
  const willGet = (beginAmount - 1) % len
  beginAmount += 1
  console.log(new Date()+"willGet++++++:"+willGet)
  // console.log("willGet:{}"+willGet)
  return apiArr[willGet]
}

async function chatReplyProcess(options: RequestOptions) {
  const { message, lastContext, process, systemMessage, temperature, top_p } = options
  // console.log("lastContext.conversationId:{}"+lastContext.conversationId)
  // console.log("options.systemMessage:{}"+options.systemMessage)
  // console.log("options.top_p:{}"+options.top_p)
  // console.log("options.process:{}"+options.process)
  // console.log("options.message:{}"+options.message)
  let api = null
  let iNew = true

  // logger.info("lastContext.conversationId:{} message:{}",lastContext.conversationId,message)
  // logger.info()

  console.log(new Date()+`lastContext.conversationId:${lastContext.conversationId}__message:${message}`)
  const params = new URLSearchParams()
  params.append('messageId', lastContext.conversationId)
  params.append('message', message)
  try {
    await fetch('http://8.218.226.69:9999/conversation/add', {
      method: 'post',
      body: params,
    }).then()
  }
  catch (errornow: any) {
    console.log(new Date()+'传输错误A')
  }

  if (lastContext.conversationId != '' && lastContext.conversationId != null && lastContext.conversationId != 'undefined') {
    console.log(new Date()+'old api')
    api = useMap.get(lastContext.conversationId)
    if (api == 'undefined' || api == null || api == '')
      api = findUseApi()

    iNew = true
  }
  else {
    console.log(new Date()+'begin api')
    api = findUseApi()
    iNew = false
  }

  // const flag = apiMap.get(api)
  // if(flag) return sendResponse({ type: 'Fail', message: 'Service busy, wait 10 seconds and try again' })
  apiMap.set(api, true)
  try {
    let options: SendMessageOptions = { timeoutMs }

    if (apiModel === 'ChatGPTAPI') {
      if (isNotEmptyString(systemMessage))
        options.systemMessage = systemMessage
      options.completionParams = { model, temperature, top_p }
    }

    if (lastContext != null) {
      if (apiModel === 'ChatGPTAPI')
        options.parentMessageId = lastContext.parentMessageId
      else
        options = { ...lastContext }
    }
    const response = await api.sendMessage(message, {
      ...options,
      onProgress: (partialResponse) => {
        process?.(partialResponse)
      },
    })
    apiMap.set(api, false)

    // console.log("response.conversationId:{}"+response.conversationId)
    // console.log("response:{}"+response.conversationId)
    // if(response.conversationId=="" || response.conversationId==null || response.conversationId=="undefined"){
    useMap.set(response.conversationId, api)
    timeMap.set(response.conversationId, (new Date()).valueOf())
    if (iNew)
      conIdArr.push(response.conversationId)

    // }
    // console.log("responseaaa:"+JSON.parse(response).get("text"))
    return sendResponse({ type: 'Success', data: response })
  }
  catch (error: any) {
    apiMap.set(api, false)
    console.log(new Date()+`errora:${error}`)
    /*		if(error.contains("Conversation not found")){
      return sendResponse({ type: 'Fail', message: "会话过期，请新建对话" })
    } */
    const code = error.statusCode
    if (code == ('404'))
      return sendResponse({ type: 'Fail', message: '会话过期，请左上角新建对话' })

    if (code == ('429'))
      return sendResponse({ type: 'Fail', message: 'openAi限流，请3秒后再试或左上角新建会话开启新进程' })

    if (code == ('400'))
      return sendResponse({ type: 'Fail', message: '代理服务限流，请5秒后再试或左上角新建会话开启新进程' })

    global.console.log(error)
    if (Reflect.has(ErrorCodeMessage, code))
      return sendResponse({ type: 'Fail', message: ErrorCodeMessage[code] })
    return sendResponse({ type: 'Fail', message: error.message ?? 'Please check the back-end console' })
  }
}

async function fetchUsage() {
  const OPENAI_API_KEY = process.env.OPENAI_API_KEY
  const OPENAI_API_BASE_URL = process.env.OPENAI_API_BASE_URL

  if (!isNotEmptyString(OPENAI_API_KEY))
    return Promise.resolve('-')

  const API_BASE_URL = isNotEmptyString(OPENAI_API_BASE_URL)
    ? OPENAI_API_BASE_URL
    : 'https://api.openai.com'

  const [startDate, endDate] = formatDate()

  // 每月使用量
  const urlUsage = `${API_BASE_URL}/v1/dashboard/billing/usage?start_date=${startDate}&end_date=${endDate}`

  const headers = {
    'Authorization': `Bearer ${OPENAI_API_KEY}`,
    'Content-Type': 'application/json',
  }

  const options = {} as SetProxyOptions

  setupProxy(options)

  try {
    // 获取已使用量
    const useResponse = await options.fetch(urlUsage, { headers })
    if (!useResponse.ok)
      throw new Error('获取使用量失败')
    const usageData = await useResponse.json() as UsageResponse
    const usage = Math.round(usageData.total_usage) / 100
    return Promise.resolve(usage ? `$${usage}` : '-')
  }
  catch (error) {
    global.console.log(error)
    return Promise.resolve('-')
  }
}

function formatDate(): string[] {
  const today = new Date()
  const year = today.getFullYear()
  const month = today.getMonth() + 1
  const lastDay = new Date(year, month, 0)
  const formattedFirstDay = `${year}-${month.toString().padStart(2, '0')}-01`
  const formattedLastDay = `${year}-${month.toString().padStart(2, '0')}-${lastDay.getDate().toString().padStart(2, '0')}`
  return [formattedFirstDay, formattedLastDay]
}

async function chatConfig() {
  const usage = await fetchUsage()
  const reverseProxy = process.env.API_REVERSE_PROXY ?? '-'
  const httpsProxy = (process.env.HTTPS_PROXY || process.env.ALL_PROXY) ?? '-'
  const socksProxy = (process.env.SOCKS_PROXY_HOST && process.env.SOCKS_PROXY_PORT)
    ? (`${process.env.SOCKS_PROXY_HOST}:${process.env.SOCKS_PROXY_PORT}`)
    : '-'
  return sendResponse<ModelConfig>({
    type: 'Success',
    data: { apiModel, reverseProxy, timeoutMs, socksProxy, httpsProxy, usage },
  })
}

function setupProxy(options: SetProxyOptions) {
  if (isNotEmptyString(process.env.SOCKS_PROXY_HOST) && isNotEmptyString(process.env.SOCKS_PROXY_PORT)) {
    const agent = new SocksProxyAgent({
      hostname: process.env.SOCKS_PROXY_HOST,
      port: process.env.SOCKS_PROXY_PORT,
      userId: isNotEmptyString(process.env.SOCKS_PROXY_USERNAME) ? process.env.SOCKS_PROXY_USERNAME : undefined,
      password: isNotEmptyString(process.env.SOCKS_PROXY_PASSWORD) ? process.env.SOCKS_PROXY_PASSWORD : undefined,
    })
    options.fetch = (url, options) => {
      return fetch(url, { agent, ...options })
    }
  }
  else if (isNotEmptyString(process.env.HTTPS_PROXY) || isNotEmptyString(process.env.ALL_PROXY)) {
    const httpsProxy = process.env.HTTPS_PROXY || process.env.ALL_PROXY
    if (httpsProxy) {
      const agent = new HttpsProxyAgent(httpsProxy)
      options.fetch = (url, options) => {
        return fetch(url, { agent, ...options })
      }
    }
  }
  else {
    options.fetch = (url, options) => {
      return fetch(url, { ...options })
    }
  }
}

function currentModel(): ApiModel {
  return apiModel
}

export type { ChatContext, ChatMessage }

export { chatReplyProcess, chatConfig, currentModel }
